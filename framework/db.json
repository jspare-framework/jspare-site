{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/the-guide/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/the-guide/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular-.eot","path":"fonts/glyphicons-halflings-regular-.eot","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/bg-purchase.png","path":"images/bg-purchase.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/flagBrazil.png","path":"images/flagBrazil.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/flagES.png","path":"images/flagES.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/flagUS.png","path":"images/flagUS.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/logo-alt.png","path":"images/logo-alt.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/js/contact.js","path":"js/contact.js","modified":0,"renderable":1},{"_id":"themes/the-guide/source/js/custom.js","path":"js/custom.js","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-.eot","path":"fonts/fontawesome-webfont-.eot","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.eot","path":"fonts/fontawesome-webfont-v=4.5.0.eot","modified":0,"renderable":1},{"_id":"themes/the-guide/source/js/jspare-sdk.js","path":"js/jspare-sdk.js","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.woff","path":"fonts/fontawesome-webfont-v=4.5.0.woff","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.woff2","path":"fonts/fontawesome-webfont-v=4.5.0.woff2","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/neuropol.ttf","path":"fonts/neuropol.ttf","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/bg-page.jpg","path":"images/bg-page.jpg","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/bg-home.jpg","path":"images/bg-home.jpg","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.ttf","path":"fonts/fontawesome-webfont-v=4.5.0.ttf","modified":0,"renderable":1},{"_id":"themes/the-guide/source/css/app.min.css","path":"css/app.min.css","modified":0,"renderable":1},{"_id":"themes/the-guide/source/js/app.min.js","path":"js/app.min.js","modified":0,"renderable":1},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.svg","path":"fonts/fontawesome-webfont-v=4.5.0.svg","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/video-poster.png","path":"images/video-poster.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/bg-index.png","path":"images/bg-index.png","modified":0,"renderable":1},{"_id":"themes/the-guide/source/images/bg-fact.png","path":"images/bg-fact.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/index.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482182336000},{"_id":"source/.DS_Store","hash":"1e9299abb9620d5dfe8c8f8f17e786a9f7c64797","modified":1482197971000},{"_id":"themes/the-guide/_config.yml","hash":"8874e417cf04ac84883b6370bd9f825004ee34a3","modified":1482182336000},{"_id":"source/contribute/index.swig","hash":"2e9bb8939536ad572eae744d18414cd66d671cd6","modified":1482182336000},{"_id":"source/docs/index.swig","hash":"3882e8f227009adec5ec27334b1749d80fd43151","modified":1484103056000},{"_id":"source/_data/menu.yml","hash":"aebf048ccd7eb9e78143992a9dd59657d19fc3f9","modified":1482182336000},{"_id":"source/_posts/hello-world.md","hash":"6808d3a23ae460bdd662c020a4cad9360aa07987","modified":1482182336000},{"_id":"source/changelog/index.swig","hash":"faae92d701865144408b2a791101721426701f7b","modified":1484092838000},{"_id":"source/get-started/index.swig","hash":"e207166462555bf2b4a82f67df88ced2e3c82b3d","modified":1484093022000},{"_id":"source/downloads/index.swig","hash":"47daa29638b9baceb89303c2648fe2b9626ad8e4","modified":1484102377000},{"_id":"themes/the-guide/languages/en.yml","hash":"6acdbadcf5f4a94e13d6ce65cb1c2f0d7317071f","modified":1482182336000},{"_id":"source/license/index.swig","hash":"4325f36da4ae33e889e1b8cad6170db0d2047e77","modified":1482182336000},{"_id":"themes/the-guide/layout/category.swig","hash":"96cf920561c76dcb469ac812afdb7320a42d2c59","modified":1482182336000},{"_id":"themes/the-guide/layout/page.swig","hash":"5dcad724156b8ca9322663139d38129a704d8768","modified":1482182336000},{"_id":"themes/the-guide/source/favicon.ico","hash":"665275dfe4c4318d86b9e7b175c03fcba4b43896","modified":1482182336000},{"_id":"themes/the-guide/layout/includes/footer.swig","hash":"99046c088a7963eab9df8b145a3c4d5096f14400","modified":1482182336000},{"_id":"themes/the-guide/layout/includes/landing-layout.swig","hash":"c67452cc24ab2940c466686e214522c4a20c78f1","modified":1482182336000},{"_id":"themes/the-guide/layout/includes/head.swig","hash":"335f708b7dcc733c74554128ad2359d7ccc104c2","modified":1482182336000},{"_id":"themes/the-guide/layout/includes/layout.swig","hash":"a67faaa751fdb146b8aec2673fc89f3152915329","modified":1482182336000},{"_id":"themes/the-guide/layout/includes/nav.swig","hash":"e02ebb68532257c94f69018c65d4ff1552313819","modified":1482182336000},{"_id":"themes/the-guide/layout/index.swig","hash":"d215ba6c424dddf6f4beffaa46a42983279efcfc","modified":1484183561000},{"_id":"themes/the-guide/layout/includes/google-analytics.swig","hash":"820e79846ad88919ff339992079507eaa17523f7","modified":1482182336000},{"_id":"themes/the-guide/source/css/custom.css","hash":"dfde4de014c74969fb5102ddc642ed22e4c842d0","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular-.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1482182336000},{"_id":"themes/the-guide/source/images/bg-purchase.png","hash":"e85859b9aef0473e99126379aa9800ab8688c71d","modified":1482182336000},{"_id":"themes/the-guide/source/images/favicon.ico","hash":"665275dfe4c4318d86b9e7b175c03fcba4b43896","modified":1482182336000},{"_id":"themes/the-guide/source/images/flagBrazil.png","hash":"dfd3075e8fe01198931127edef6f0b8d10da4623","modified":1482182336000},{"_id":"themes/the-guide/source/images/flagES.png","hash":"a1265049d1be51ad063a094109144d6a72fd3b34","modified":1482182336000},{"_id":"themes/the-guide/source/images/flagUS.png","hash":"bf8b3009f2456e922e07363f170412e8256cde81","modified":1482182336000},{"_id":"themes/the-guide/source/images/logo-alt.png","hash":"8647af426ad65448b86e019ae8b4aa87a105c01f","modified":1482182336000},{"_id":"themes/the-guide/source/images/logo.png","hash":"8647af426ad65448b86e019ae8b4aa87a105c01f","modified":1482182336000},{"_id":"themes/the-guide/source/js/contact.js","hash":"fe42a14f2ed88e6ae7b354aac7c0b7216bf3bf23","modified":1482182336000},{"_id":"themes/the-guide/source/js/custom.js","hash":"b4e34d81488b43ee80d2c9883ecae14adaeb7f2e","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1482182336000},{"_id":"themes/the-guide/source/js/jspare-sdk.js","hash":"1f81dba31098effd43824a289ab874fd9c58fe2f","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/neuropol.ttf","hash":"3a6616a0956e223cd4172198d1dec2be79adfbfb","modified":1482182336000},{"_id":"themes/the-guide/source/images/bg-page.jpg","hash":"6013371321990869cf0f83c9a9bf7ef03bda5feb","modified":1482182336000},{"_id":"themes/the-guide/source/images/bg-home.jpg","hash":"240b9211708a5f689161e739543fe7b8f23b62a0","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1482182336000},{"_id":"themes/the-guide/source/css/app.min.css","hash":"eb061aa8c26a8f06469add1b1833421b56e450b3","modified":1482182336000},{"_id":"themes/the-guide/source/js/app.min.js","hash":"3048fbab0f6aab3a3271de1a58c2d7ff82a89a5e","modified":1482182336000},{"_id":"themes/the-guide/source/fonts/fontawesome-webfont-v=4.5.0.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1482182336000},{"_id":"themes/the-guide/source/images/video-poster.png","hash":"88953e629e4680d61f7a990b443268b5624bcd0d","modified":1482182336000},{"_id":"themes/the-guide/source/images/bg-index.png","hash":"c7e644895fc524b9fadf1e4df889b75fec889c13","modified":1482182336000},{"_id":"themes/the-guide/source/images/bg-fact.png","hash":"3aedb32bee78fee07c9433253495aae4f9eb63c1","modified":1482182336000},{"_id":"public/index.html","hash":"b0a7ac554cdc6b38500d60418ce6e8b0ccc619f0","modified":1484183668352},{"_id":"public/contribute/index.html","hash":"e190491a4ed1e0971fecb7d2d8c0b74301c5db8c","modified":1484103223342},{"_id":"public/changelog/index.html","hash":"44d91171027011bbce411d958ea0cf677cc9d238","modified":1484103223342},{"_id":"public/get-started/index.html","hash":"6378ac58c67618cd3e4a4d18b236e1efdbffff91","modified":1484103223342},{"_id":"public/downloads/index.html","hash":"c3c417f85b5eff4879fe629d7af8075ad35c6be3","modified":1484103223343},{"_id":"public/license/index.html","hash":"71d630509e7c900a57b9d44aa83e107d161d3458","modified":1484103223343},{"_id":"public/01/08/2016/hello-world/index.html","hash":"1202b3574f586a8f5e73c17c24d453262ae49a1b","modified":1484103223343},{"_id":"public/archives/index.html","hash":"3b46da8c16a3b51fc190ff8139ae789b8244b4d9","modified":1484183668352},{"_id":"public/archives/2016/index.html","hash":"c59577cf071490fc3aa93bccd4c16d542b89b4d7","modified":1484183668353},{"_id":"public/archives/2016/08/index.html","hash":"a2abf8718f36de8193db190c141edc2d70e9d605","modified":1484183668353},{"_id":"public/docs/index.html","hash":"a8c4c11c60252474d4f31275ec00b9b1bb0be0cb","modified":1484103223343},{"_id":"public/favicon.ico","hash":"665275dfe4c4318d86b9e7b175c03fcba4b43896","modified":1484103223355},{"_id":"public/fonts/glyphicons-halflings-regular-.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1484103223355},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1484103223355},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1484103223355},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1484103223355},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1484103223355},{"_id":"public/images/bg-purchase.png","hash":"e85859b9aef0473e99126379aa9800ab8688c71d","modified":1484103223355},{"_id":"public/images/favicon.ico","hash":"665275dfe4c4318d86b9e7b175c03fcba4b43896","modified":1484103223356},{"_id":"public/images/flagBrazil.png","hash":"dfd3075e8fe01198931127edef6f0b8d10da4623","modified":1484103223356},{"_id":"public/images/flagES.png","hash":"a1265049d1be51ad063a094109144d6a72fd3b34","modified":1484103223356},{"_id":"public/images/flagUS.png","hash":"bf8b3009f2456e922e07363f170412e8256cde81","modified":1484103223356},{"_id":"public/images/logo-alt.png","hash":"8647af426ad65448b86e019ae8b4aa87a105c01f","modified":1484103223356},{"_id":"public/images/logo.png","hash":"8647af426ad65448b86e019ae8b4aa87a105c01f","modified":1484103223356},{"_id":"public/fonts/fontawesome-webfont-.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1484103223365},{"_id":"public/fonts/fontawesome-webfont-v=4.5.0.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1484103223366},{"_id":"public/fonts/fontawesome-webfont-v=4.5.0.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1484103223372},{"_id":"public/fonts/fontawesome-webfont-v=4.5.0.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1484103223372},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1484103223373},{"_id":"public/fonts/neuropol.ttf","hash":"3a6616a0956e223cd4172198d1dec2be79adfbfb","modified":1484103223373},{"_id":"public/images/bg-page.jpg","hash":"6013371321990869cf0f83c9a9bf7ef03bda5feb","modified":1484103223377},{"_id":"public/images/bg-home.jpg","hash":"240b9211708a5f689161e739543fe7b8f23b62a0","modified":1484103223378},{"_id":"public/css/custom.css","hash":"dfde4de014c74969fb5102ddc642ed22e4c842d0","modified":1484103223385},{"_id":"public/js/contact.js","hash":"fe42a14f2ed88e6ae7b354aac7c0b7216bf3bf23","modified":1484103223385},{"_id":"public/js/custom.js","hash":"b4e34d81488b43ee80d2c9883ecae14adaeb7f2e","modified":1484103223385},{"_id":"public/js/jspare-sdk.js","hash":"1f81dba31098effd43824a289ab874fd9c58fe2f","modified":1484103223385},{"_id":"public/css/app.min.css","hash":"eb061aa8c26a8f06469add1b1833421b56e450b3","modified":1484103223385},{"_id":"public/js/app.min.js","hash":"3048fbab0f6aab3a3271de1a58c2d7ff82a89a5e","modified":1484103223385},{"_id":"public/fonts/fontawesome-webfont-v=4.5.0.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1484103223386},{"_id":"public/fonts/fontawesome-webfont-v=4.5.0.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1484103223415},{"_id":"public/images/video-poster.png","hash":"88953e629e4680d61f7a990b443268b5624bcd0d","modified":1484103223416},{"_id":"public/images/bg-index.png","hash":"c7e644895fc524b9fadf1e4df889b75fec889c13","modified":1484103223432},{"_id":"public/images/bg-fact.png","hash":"3aedb32bee78fee07c9433253495aae4f9eb63c1","modified":1484103223442}],"Category":[],"Data":[{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"_content":"","source":"index.swig","raw":"","date":"2016-12-19T21:18:56.000Z","updated":"2016-12-19T21:18:56.000Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"cixscqmtm0000v09kmit848qi","content":"","excerpt":"","more":""},{"id":"contribute","title":"Contribute","nav_title":"We are JSpare, and you?","nav_message":"We do our best, make part of the team!","date":"2016-07-21T16:40:50.000Z","_content":"\n\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\t\t\n\t\t<li><a href=\"#sec-donate\">Donate</a></li>\n\t\t<li><a href=\"#sec-social\">Contribute</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section id=\"sec-donate\" class=\"no-border-bottom bg-img-purchase bg-repeat text-center\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Donate</h2>\n\t\t\t<p>We do our best, but we need help!</p>\n\t\t</header>\n\n\t\t<div class=\"row\">\n\t\t\t<h4>Make a donation and contribute to the development of our projects.</h4>\n\t\t</div>\n\t\t<br />\n\t\t<div align=\"center\">\n\n\t\t\t<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n\t\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"> <input type=\"hidden\" name=\"encrypted\"\n\t\t\t\t\tvalue=\"-----BEGIN PKCS7-----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-----END PKCS7-----\n\">\n\t\t\t\t<input type=\"image\" src=\"https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif\"\n\t\t\t\t\tborder=\"0\" name=\"submit\" alt=\"PayPal - A maneira fácil e segura de enviar pagamentos online!\">\n\t\t\t\t<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/pt_BR/i/scr/pixel.gif\" width=\"1\"\n\t\t\t\t\theight=\"1\">\n\t\t\t</form>\n\n\t\t</div>\n\n\t</div>\n</section>\n\n\n<section id=\"sec-social\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>Connect Us</span>\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>\n\t\t\t\tHelp us, fork in <a href=\"https://github.com/jspare-projects/\"><i class=\"fa fa-github\"></i>GitHub.</a>.\n\t\t\t</p>\n\t\t</header>\n\n\t\t<div align=\"center\">\n\t\t\t<ul class=\"color-palette-circular\">\n\t\t\t\t<li class=\"bg-dark\"><a href=\"https://github.com/jspare-projects/\"><i class=\"fa fa-github fa-5x\"\n\t\t\t\t\t\tstyle=\"vertical-align: middle;\"></i></a></li>\n\t\t\t</ul>\n\t\t</div>\n\n\t</div>\n\n</section>","source":"contribute/index.swig","raw":"---\nid: contribute\ntitle: Contribute\nnav_title: We are JSpare, and you?\nnav_message: We do our best, make part of the team!\ndate: 2016-07-21 13:40:50\n---\n\n\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\t\t\n\t\t<li><a href=\"#sec-donate\">Donate</a></li>\n\t\t<li><a href=\"#sec-social\">Contribute</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section id=\"sec-donate\" class=\"no-border-bottom bg-img-purchase bg-repeat text-center\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Donate</h2>\n\t\t\t<p>We do our best, but we need help!</p>\n\t\t</header>\n\n\t\t<div class=\"row\">\n\t\t\t<h4>Make a donation and contribute to the development of our projects.</h4>\n\t\t</div>\n\t\t<br />\n\t\t<div align=\"center\">\n\n\t\t\t<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n\t\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"> <input type=\"hidden\" name=\"encrypted\"\n\t\t\t\t\tvalue=\"-----BEGIN PKCS7-----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-----END PKCS7-----\n\">\n\t\t\t\t<input type=\"image\" src=\"https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif\"\n\t\t\t\t\tborder=\"0\" name=\"submit\" alt=\"PayPal - A maneira fácil e segura de enviar pagamentos online!\">\n\t\t\t\t<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/pt_BR/i/scr/pixel.gif\" width=\"1\"\n\t\t\t\t\theight=\"1\">\n\t\t\t</form>\n\n\t\t</div>\n\n\t</div>\n</section>\n\n\n<section id=\"sec-social\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>Connect Us</span>\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>\n\t\t\t\tHelp us, fork in <a href=\"https://github.com/jspare-projects/\"><i class=\"fa fa-github\"></i>GitHub.</a>.\n\t\t\t</p>\n\t\t</header>\n\n\t\t<div align=\"center\">\n\t\t\t<ul class=\"color-palette-circular\">\n\t\t\t\t<li class=\"bg-dark\"><a href=\"https://github.com/jspare-projects/\"><i class=\"fa fa-github fa-5x\"\n\t\t\t\t\t\tstyle=\"vertical-align: middle;\"></i></a></li>\n\t\t\t</ul>\n\t\t</div>\n\n\t</div>\n\n</section>","updated":"2016-12-19T21:18:56.000Z","path":"contribute/index.html","comments":1,"layout":"page","_id":"cixscqmym0001v09kw4zwytgg","content":"\n\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\t\t\n\t\t<li><a href=\"#sec-donate\">Donate</a></li>\n\t\t<li><a href=\"#sec-social\">Contribute</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section id=\"sec-donate\" class=\"no-border-bottom bg-img-purchase bg-repeat text-center\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Donate</h2>\n\t\t\t<p>We do our best, but we need help!</p>\n\t\t</header>\n\n\t\t<div class=\"row\">\n\t\t\t<h4>Make a donation and contribute to the development of our projects.</h4>\n\t\t</div>\n\t\t<br>\n\t\t<div align=\"center\">\n\n\t\t\t<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n\t\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"> <input type=\"hidden\" name=\"encrypted\" value=\"-----BEGIN PKCS7-----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-----END PKCS7-----\n\">\n\t\t\t\t<input type=\"image\" src=\"https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif\" border=\"0\" name=\"submit\" alt=\"PayPal - A maneira fácil e segura de enviar pagamentos online!\">\n\t\t\t\t<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/pt_BR/i/scr/pixel.gif\" width=\"1\" height=\"1\">\n\t\t\t</form>\n\n\t\t</div>\n\n\t</div>\n</section>\n\n\n<section id=\"sec-social\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>Connect Us</span>\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>\n\t\t\t\tHelp us, fork in <a href=\"https://github.com/jspare-projects/\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-github\"></i>GitHub.</a>.\n\t\t\t</p>\n\t\t</header>\n\n\t\t<div align=\"center\">\n\t\t\t<ul class=\"color-palette-circular\">\n\t\t\t\t<li class=\"bg-dark\"><a href=\"https://github.com/jspare-projects/\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-github fa-5x\" style=\"vertical-align: middle;\"></i></a></li>\n\t\t\t</ul>\n\t\t</div>\n\n\t</div>\n\n</section>","excerpt":"","more":"\n\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\t\t\n\t\t<li><a href=\"#sec-donate\">Donate</a></li>\n\t\t<li><a href=\"#sec-social\">Contribute</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section id=\"sec-donate\" class=\"no-border-bottom bg-img-purchase bg-repeat text-center\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Donate</h2>\n\t\t\t<p>We do our best, but we need help!</p>\n\t\t</header>\n\n\t\t<div class=\"row\">\n\t\t\t<h4>Make a donation and contribute to the development of our projects.</h4>\n\t\t</div>\n\t\t<br />\n\t\t<div align=\"center\">\n\n\t\t\t<form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\">\n\t\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"> <input type=\"hidden\" name=\"encrypted\"\n\t\t\t\t\tvalue=\"-----BEGIN PKCS7-----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-----END PKCS7-----\n\">\n\t\t\t\t<input type=\"image\" src=\"https://www.paypalobjects.com/pt_BR/BR/i/btn/btn_donateCC_LG.gif\"\n\t\t\t\t\tborder=\"0\" name=\"submit\" alt=\"PayPal - A maneira fácil e segura de enviar pagamentos online!\">\n\t\t\t\t<img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/pt_BR/i/scr/pixel.gif\" width=\"1\"\n\t\t\t\t\theight=\"1\">\n\t\t\t</form>\n\n\t\t</div>\n\n\t</div>\n</section>\n\n\n<section id=\"sec-social\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>Connect Us</span>\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>\n\t\t\t\tHelp us, fork in <a href=\"https://github.com/jspare-projects/\"><i class=\"fa fa-github\"></i>GitHub.</a>.\n\t\t\t</p>\n\t\t</header>\n\n\t\t<div align=\"center\">\n\t\t\t<ul class=\"color-palette-circular\">\n\t\t\t\t<li class=\"bg-dark\"><a href=\"https://github.com/jspare-projects/\"><i class=\"fa fa-github fa-5x\"\n\t\t\t\t\t\tstyle=\"vertical-align: middle;\"></i></a></li>\n\t\t\t</ul>\n\t\t</div>\n\n\t</div>\n\n</section>"},{"id":"docs","title":"Docs","nav_title":"Documentation","nav_message":"Guideline for start with JSpare Core Container","date":"2016-07-21T16:40:50.000Z","_content":"\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-gettingstarted\">Get Started</a></li>\n\t\t<li><a href=\"#sec-core\">JSpare Container</a></li>\n\t\t<li><a href=\"#sec-contribute\">Contribute</a></li>\n\t\t<li><a href=\"#sec-others\">Others</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section>\n\t<div class=\"container\">\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Content</h2>\n\t\t</header>\n\t\t\n\t\t<ul class=\"link-list\">\n\t\t\t<li>\n\t\t\t\t<h5>Get Started</h5>\n\t\t\t\t<a href=\"#sec-gettingstarted-dep\">Dependencies</a>\n\t\t\t\t<a href=\"#sec-gettingstarted-project\">Structuring a project</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<h5>JSpare Container</h5>\n\t\t\t\t<a href=\"#sec-core-env\">Environment Overview</a>\n\t\t\t\t<a href=\"#sec-core-container\">Container</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-components\">Components & Resources</a>\n\t\t\t\t<a href=\"#sec-core-injection\">Injections & Injectors</a>\t\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-conf\">Configuration</a>\n\t\t\t\t<a href=\"#sec-core-boostrap\">Bootstrap</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Contribute</h5>\n\t\t\t\t<a href=\"#sec-contribute-issues\">Issues / Bugs</a>\n\t\t\t\t<a href=\"#sec-contribute-changelog\">Changelog</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Others</h5>\n\t\t\t\t<a href=\"#sec-others-architecture\">Architecture</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-others-dep\">Dependencies Resolutions</a>\n\t\t\t\t<a href=\"#sec-others-dep\">Other references</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section id=\"sec-gettingstarted\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Get Started</h2>\n\t\t\t<p>Starting with JSpare Framework</p>\n\t\t</header>\n\t\t\n\n\t\t<p>The first thing you always ask yourself is how to start using a framework, you'll see that with Jspare there's nothing out of this world, let's start with dependencies ...</p>\n\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>Note: For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\n\t<p>Incredible, you added our dependency and now where we can start, following this document we will try to be logical and consistent with the explanations, let's understand how the ship works and then fly ok?</p>\n\t\n\n</section>\n\n<section id=\"sec-core\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>JSpare Container</h2>\n\t\t\t<p>Understanding the core of our application</p>\n\t\t</header>\n\t</div>\n\n\t<br>\n\t<h4 id=\"sec-core-env\">Environment Overview</h4>\n\n\t<p>Well, if you are here it is because you want to understand a bit more how the Jspare Framework works. The Container, is the core of our framework and it is responsible for most of the framework engine. Okay, but let's start at the beginning. What is the framework for? Let's understand ...</p>\n\n\t<p>The main function of JSpare Framework is to provide a simple, intuitive and powerful container for your java applications. This is the essence and with it we gain some more characteristics. Our container is responsible for providing and managing the instance of components and resources used in our applications, when we deal with this issue we are talking about dependency injection, control inversion and the usage of some design patterns that are issues very important for the construction of one software. We cherish user-friendliness and increasingly make the framework simple to use on a day-to-day basis, remove the many configurations, apply conventions, and thus create a culture of thinking a little bit more when it comes to building software. Such as: Component reuse, clean code, and development complexity reduction.</p>\n\n\t<p>But let's talk about what matters, the Framework. Our application is based on the concept of standalone applications, in the end we will have a single artifact with all the necessary dependencies and libraries packaged in a fat-jar. I promise in the next topics to put a little more in practice to understand and have reference of how things work ...</p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-container\">Container</h4>\n\t\n\t<p>The core of JSpare Framework, the Container. This is where everything happens and is a more important part of the framework. The container is responsible for controlling the resources, components and everything that is being delegated to the infrastructure of the framework. In practice, when we want to access an implementation we will request for the container, directly or indirectly. The same will happen when we are providing a resource to be shared in the container. And it is in the <code>Environment</code> that this happen, the Environment exposes methods for safe handling of resources, as the methods: <code>registryComponent</code>, <code>registryResource</code>, <code>my</code> and others to do this.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\nimport static org.jspare.container.Environment.registryResource;\nimport static org.jspare.container.Environment.registryComponent;\n\nregistryComponent(new SomeInterfaceImpl());\nregistryResource(new SomeResource());\n\nmy(SomeInterface.class).doSomething(); \n\nT result = my(SomeResource.class).doAnother();\n\n</code></pre>\n\n\t<p>To understand how all this works, let's look at the topic introduction about features and components and the use of Environment for manipulation.</p>\n\n\t<p>Note, the container itself does not have the feature of clustering its resources, for this must use a specific library like Hazelcast or the one of its preference, we intend to approach this subject ahead, thinking about integrations and componentization using OSGi.</p>\n\n\t<br>\n\t<h4 id=\"sec-core-components\">Components & Resources</h4>\n\t\n\t<p>Things do not happen if we do not have the stereotypes to manipulate resources and components. For different purposes two of these are available, <code>@Component</code> and <code>@Resource</code>. Both annotations should be used in classes and they define the characteristics that their implementations will have in the application.</p>\n\n\t<h5>Component</h5>\n\t\n\t<p>Modularizing is critical to a cohesive and decoupled implementation. The <code>@Component</code> it does just that. Writing an interface and noting with the component stereotype is giving character and life to your interface.</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Component\npublic interface AccountService {\n\n\tList<Account> list();\n\n\tOptional<Account> findById(int id);\n\n\tvoid save(Account account);\n}\n</code></pre>\n\n<p>We have the definition of an interface annotated by <code>@Component</code>. When you try to access the interface with Environemnt using the <code>my</code> static method or <code>@Inject</code> for one handling class the container will understand to look for a registered implementation and will resolve your declaration. Nice, but how will the container look for an implementation?</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</code></pre>\n<p>If the interface implementation is standard, you do not need to directly register the implementation in the container, it is enough that the implementation package structure follows the same interface as: <code>foo.service.*</code> and the class nomenclature that implements use the suffix <code>[InterfaceClassName]Impl</code>. Thus:</p>\n\n\t\t<pre><code class=\"language-java\">\nfoo.service.AccountService\nfoo.service.AccountServiceImpl\n</code></pre>\n\n<p>With this, the container will understand that the default implementation that should be used is that found by the convention. But, and in case of having my implementation in another package or following another pattern of nomenclature and structure?\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</code></pre>\n\n<p>Of face the container will not understand that this its class is the implementation that represents this component. So it is necessary to record this implementation in the environment.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.registryComponent;\n\nvoid foo(){\n\t\n\tregistryComponent(new AccountServiceOtherImpl());\n\n\t// or\n\n\tregistryComponent(AccountServiceOtherImpl.class);\n\n\t// So make sure there is a parameterless constructor so that it is instantiated correctly. Otherwise he would have received an exception.\n\t\n}\n</code></pre>\n\n<p>Being available to the Environment, the component can already be accessed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\nvoid consumer(){\n\t\n\tAccountService service = my(AccountService.class);\n\tservice.save(new Account(\"...\"));\n\tList<Account> accounts = service.list();\n\n\t// or direct access\n\n\tOptional<Account> oAccount = my(AccountService.class).findById(1);\n\tmy(AccountService.class).save(new Account(\"...\"));\n}\n</code></pre>\n\n<p>We are no longer concerned with what the implementation is calling, either because we are using the standard or a registered implementation. But in case I need more than one implementation registered in my application? Qualifiers!</p>\n\n\t<h5>Qualifiers</h5>\n\t\n\n\t<p>In case we need to have more than one registered implementation we can use the qualifiers, they server so the container distinguishes more than one implementation. Throught annotation <code>@Qualify</code> we're going to tell you what the implementation we're using is for the container.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Qualify(˜DefaultImpl˜)\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n\n// or \n\n@Qualify(\"CustomImpl\")\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\ns}\n</code></pre>\n\n<p>In the above codes we are using two qualifications to perform the manipulation of the defined interface. In order to use it we need to ensure that the reading and access to the environment is informed the qualifier </p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate AccountServce service;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tList<Account> accounts = my(AccountService.class, ˜DefaultImpl˜).list(); // Default first list\n\n\t\n\tList<Account> accounts = my(AccountService.class, \"Customl\").list(); // Custom list\n\n}\n</code></pre>\n\n<p>Every request for the container is executed on demand. Either the design of a component is very important for the application to remain lightweight and scalable.</p>\n\n\t\n\n\t<h5>Resource</h5>\n\t\n\n\t<p>Similar to the component a resource is also registered and manipulated by the Enviromente, however a resource does not have to be defined by an interface, a resource is direct access to a system functionality and should be used when there is no perspective of decoupling.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tpublic void foo(){\n\t\t// ... do something\n\t}\n}\n</code></pre>\n\n<p>A resource is automatically registered in the container and loaded by demand as well as the components, other than a component a resource does not follow a nomenclature for load, only a standard so that it can be instantiated, that is, for a resource to be correctly loaded, Have a public constructor and no parameters.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate SimpleApi api;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tapi.foo();\n\n\t// or\n\n\tmy(SimpleApi.class).foo();\n\n}\n</code></pre>\n\n<p>For the case of resources instantiated manually, access the environment and call the registryResource method passing the instance.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(String name){\n\t\tthis.name = name;\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n\n// for registry\n\nvoid setup(){\n\t\n\tregistryResource(new SimpleApi(\"jspare\"));\n}\n\n</code></pre>\n\n<h5>Auxiliar</h5>\n\n\n<p>The life cycle of a component happens as follows when the environment requests that an instance be returned and in case it has not yet been lifted the following steps are performed.</p>\n\n<ul>\n\t<li>Create new component instance</li>\n\t<li>Resolve dependencies, with injection</li>\n\t<li>Call auxiliar method annotated by <code>@After</code></li>\n\t<li>Returns component reference.</li>\n</ul>\n\n<h6>Create new component instance</h6>\n\n<p>The public constructor call is executed without parameters for standard deployments, or the registered instance is retrieved.</p>\n\n<h6>Resolve dependencies, with injection</h6>\n<p>Internally the helper component is called <code>ContainerUtils.processInjection</code> with the instance, resolving all dependencies.</p>\n\n<h6>After calls</h6>\n<p>In order to aid in the life cycle a trigger has been introduced to p [the instantiation of a resource or component. After an instance is generated, if there is a method with the @After annotation this will be called and executed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Foo  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(){\n\t\t\n\t}\n\n\t@After\n\tprivate void setup(){\n\n\t\tthis.name = UUID.randomUUID().toString();\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n</code></pre>\n\n<p>In this example, when the resource was created the after method will generate a random uuid for the field name.</p>\n\n<h6>Returns component reference.</h6>\n<p>It is returned to the requested instance being casted using Java Generic, leaving its apis fluent and usual.</p>\n\n\n<p><b>Important: To access a resource or component by the environment, the classes that will be retrieved must have annotated the stereotypes: <code>@Component</code> or <code>@Resource</code>. Otherwise, the container will refuse.</b></p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-injection\">Injections & Injectors</h4>\n\t\n\n\t<p>When a class is processed by Environment, processing of an instance is performed. This processing is part of the life cycle of a component or resource. And it is essential for the inversion of control and injection of dependencies.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Consumer  {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>Through these annotations processing is performed the resource is requested for the environment and its components and features are available. Okay, but for those cases where I'm not in the life-cycle flow for injection, how do I do it?</p>\n\n<p>To perform the processing of your class outside the lifecycle it is necessary to call manually so that it is processed. For this there are two ways: the call of an auxiliary method to perform the processing or extend its class of the abstract <code>MySupport<code>.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends MySupport {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>When extending this way, your class is within the life cycle, but if it is not possible to extend through your class already being inherited from another parent, you can add a trigger for processing, e.g:</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends Another {\n\n\tpublic Client(){\n\n\t\tContainerUtils.processInjection(this);\n\t}\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>The process injection method will process the requested instance and resolve the required dependencies.</p>\n\n<p>An excellent example is using an android application (you need to be using the <code>jspare-core-androi-support</code> module in this case) to process and inject your services, components and resources when creating the instance of an Activity you can call the <code>processInjection</code>.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\nimport static org.jspare.core.container.ContainerUtils.processInjection;\n\npublic final class MultiTrackerActivity extends AppCompatActivity {\n\n\t@Inject\n\tprivate AccountService accountService;\n\n\t/**\n     * Initializes the UI and creates the detector pipeline.\n     */\n    @Override\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView(R.layout.main);\n\n        processInjection(this);\n    }\n\n}\n</code></pre>\n\n\t<h4 id=\"sec-core-conf\">Configuration</h4>\n\t\n\t<p>When we talk about integration or we are proposed to develop an application, we have a task always on our side. The configuration. But what do we need to configure application for? I'm going to answer that one, we usually indicate how the parameterization of our environment, such as: variables, libraries and references. And that's key to keeping our application ready for environment migration or anything.</p>\n\t<p>The JSpare Framework offers a simple way to solve and manipulate your settings, we outsource through component <code>CommonsConfig</code> that extends <code>Configuration</code> from Apache Commons project and externalize this through a component that can be injected through inversion control injection into your application. </p>\n\n\t<br>\n\t<h4 id=\"sec-core-boostrap\">Bootstrap</h4>\n\n\t<p>We say that our application is based on the concept of an standalone application. And all this starts from the beginning. So obvious ... We're talking about Bootstrap. </p>\n\n\t<p>Bootstrap is the point that defines the beginning of our application, we speak of a class with a main method that is executed to start a program in java. Cool, but what's so different? And now let's get to work ...</p>\n\n\t<p>The following code snippet refers to traditional initialization class implemented with the Jspare Framework. (From here we will always try to make clear our codes, we will put the import packages and reference the contents)</p>\n\n\t <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport org.jspare.core.container.Application;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n  \t... Execute something here ...\n  }\n}\n</code>\n        </pre>\n\n     <p>The example will trigger your application if it has structured as an application stando alone and its end result is a fat-jar. But note that this is not a rule, there are other ways to start the container, let's address later. But speaking the real, it will depend a lot on your application or other technology you are using. To finish the reasoning, we are easy to integrate with your project.</p>\n\n</div>\n</section>\n\n<section id=\"sec-contribute\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>The JSpare more powerfull</p>\n\t\t</header>\n\t\t\n\t\t<br>\n\t\t<h4 id=\"sec-contribute-issues\">Issues / Bugs</h4>\n\t\t<p>You can report any issue or bug, just go to our github and register a new task, make sure our team and above all the community will help you. For our growth it is fundamental that we are always united with the whole community.</p>\n\n\t\t<p>Please register your issue at: <a href=\"https://github.com/jspare-projects/jspare-container/issues\">GitHub / Issues</a> \n\t\t\t\n\t\t\t<h4 id=\"sec-contribute-changelog\">Changelog</h4>\n\n\t\t\t<p>Access the <a href=\"/docs\">Changelog Page</a> and track all of our backlog and predictions of new features and fixes.</p>\n\t\t</div>\n\t</section>\n\n\t<section id=\"sec-others\">\n\t\t<div class=\"container\">\n\t\t\t<header class=\"section-header\">\n\t\t\t\t<h2>Others</h2>\n\t\t\t\t<p>Behind of framework</p>\n\t\t\t</header>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-architecture\">Architecture</h4>\n\n\t\t\t<p>We are writing an article with all the detail behind development. Sign up and do not miss updates.</p>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-dep\">Dependencies Resolutions</h4>\n\n\t\t\t<p>Our entire project was thought to be the purest and simplest solution in terms of container and control inversion.</p>\n\n\t\t\t<p>We have a short list of dependencies that are part of our development, know a bit more because we use some of these technologies.</p>\n\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-ref\">Other references</h4>\n\n\t\t\t<p>In this section we will bring some other references of projects that use or are based on the jspare framework.</p>\n\n\t\t</div>\n\t</section>","source":"docs/index.swig","raw":"---\nid: docs\ntitle: Docs\nnav_title: Documentation\nnav_message: Guideline for start with JSpare Core Container\ndate: 2016-07-21 13:40:50\n---\n\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-gettingstarted\">Get Started</a></li>\n\t\t<li><a href=\"#sec-core\">JSpare Container</a></li>\n\t\t<li><a href=\"#sec-contribute\">Contribute</a></li>\n\t\t<li><a href=\"#sec-others\">Others</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section>\n\t<div class=\"container\">\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Content</h2>\n\t\t</header>\n\t\t\n\t\t<ul class=\"link-list\">\n\t\t\t<li>\n\t\t\t\t<h5>Get Started</h5>\n\t\t\t\t<a href=\"#sec-gettingstarted-dep\">Dependencies</a>\n\t\t\t\t<a href=\"#sec-gettingstarted-project\">Structuring a project</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<h5>JSpare Container</h5>\n\t\t\t\t<a href=\"#sec-core-env\">Environment Overview</a>\n\t\t\t\t<a href=\"#sec-core-container\">Container</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-components\">Components & Resources</a>\n\t\t\t\t<a href=\"#sec-core-injection\">Injections & Injectors</a>\t\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-conf\">Configuration</a>\n\t\t\t\t<a href=\"#sec-core-boostrap\">Bootstrap</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Contribute</h5>\n\t\t\t\t<a href=\"#sec-contribute-issues\">Issues / Bugs</a>\n\t\t\t\t<a href=\"#sec-contribute-changelog\">Changelog</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Others</h5>\n\t\t\t\t<a href=\"#sec-others-architecture\">Architecture</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-others-dep\">Dependencies Resolutions</a>\n\t\t\t\t<a href=\"#sec-others-dep\">Other references</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section id=\"sec-gettingstarted\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Get Started</h2>\n\t\t\t<p>Starting with JSpare Framework</p>\n\t\t</header>\n\t\t\n\n\t\t<p>The first thing you always ask yourself is how to start using a framework, you'll see that with Jspare there's nothing out of this world, let's start with dependencies ...</p>\n\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>Note: For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\n\t<p>Incredible, you added our dependency and now where we can start, following this document we will try to be logical and consistent with the explanations, let's understand how the ship works and then fly ok?</p>\n\t\n\n</section>\n\n<section id=\"sec-core\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>JSpare Container</h2>\n\t\t\t<p>Understanding the core of our application</p>\n\t\t</header>\n\t</div>\n\n\t<br>\n\t<h4 id=\"sec-core-env\">Environment Overview</h4>\n\n\t<p>Well, if you are here it is because you want to understand a bit more how the Jspare Framework works. The Container, is the core of our framework and it is responsible for most of the framework engine. Okay, but let's start at the beginning. What is the framework for? Let's understand ...</p>\n\n\t<p>The main function of JSpare Framework is to provide a simple, intuitive and powerful container for your java applications. This is the essence and with it we gain some more characteristics. Our container is responsible for providing and managing the instance of components and resources used in our applications, when we deal with this issue we are talking about dependency injection, control inversion and the usage of some design patterns that are issues very important for the construction of one software. We cherish user-friendliness and increasingly make the framework simple to use on a day-to-day basis, remove the many configurations, apply conventions, and thus create a culture of thinking a little bit more when it comes to building software. Such as: Component reuse, clean code, and development complexity reduction.</p>\n\n\t<p>But let's talk about what matters, the Framework. Our application is based on the concept of standalone applications, in the end we will have a single artifact with all the necessary dependencies and libraries packaged in a fat-jar. I promise in the next topics to put a little more in practice to understand and have reference of how things work ...</p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-container\">Container</h4>\n\t\n\t<p>The core of JSpare Framework, the Container. This is where everything happens and is a more important part of the framework. The container is responsible for controlling the resources, components and everything that is being delegated to the infrastructure of the framework. In practice, when we want to access an implementation we will request for the container, directly or indirectly. The same will happen when we are providing a resource to be shared in the container. And it is in the <code>Environment</code> that this happen, the Environment exposes methods for safe handling of resources, as the methods: <code>registryComponent</code>, <code>registryResource</code>, <code>my</code> and others to do this.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\nimport static org.jspare.container.Environment.registryResource;\nimport static org.jspare.container.Environment.registryComponent;\n\nregistryComponent(new SomeInterfaceImpl());\nregistryResource(new SomeResource());\n\nmy(SomeInterface.class).doSomething(); \n\nT result = my(SomeResource.class).doAnother();\n\n</code></pre>\n\n\t<p>To understand how all this works, let's look at the topic introduction about features and components and the use of Environment for manipulation.</p>\n\n\t<p>Note, the container itself does not have the feature of clustering its resources, for this must use a specific library like Hazelcast or the one of its preference, we intend to approach this subject ahead, thinking about integrations and componentization using OSGi.</p>\n\n\t<br>\n\t<h4 id=\"sec-core-components\">Components & Resources</h4>\n\t\n\t<p>Things do not happen if we do not have the stereotypes to manipulate resources and components. For different purposes two of these are available, <code>@Component</code> and <code>@Resource</code>. Both annotations should be used in classes and they define the characteristics that their implementations will have in the application.</p>\n\n\t<h5>Component</h5>\n\t\n\t<p>Modularizing is critical to a cohesive and decoupled implementation. The <code>@Component</code> it does just that. Writing an interface and noting with the component stereotype is giving character and life to your interface.</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Component\npublic interface AccountService {\n\n\tList<Account> list();\n\n\tOptional<Account> findById(int id);\n\n\tvoid save(Account account);\n}\n</code></pre>\n\n<p>We have the definition of an interface annotated by <code>@Component</code>. When you try to access the interface with Environemnt using the <code>my</code> static method or <code>@Inject</code> for one handling class the container will understand to look for a registered implementation and will resolve your declaration. Nice, but how will the container look for an implementation?</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</code></pre>\n<p>If the interface implementation is standard, you do not need to directly register the implementation in the container, it is enough that the implementation package structure follows the same interface as: <code>foo.service.*</code> and the class nomenclature that implements use the suffix <code>[InterfaceClassName]Impl</code>. Thus:</p>\n\n\t\t<pre><code class=\"language-java\">\nfoo.service.AccountService\nfoo.service.AccountServiceImpl\n</code></pre>\n\n<p>With this, the container will understand that the default implementation that should be used is that found by the convention. But, and in case of having my implementation in another package or following another pattern of nomenclature and structure?\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</code></pre>\n\n<p>Of face the container will not understand that this its class is the implementation that represents this component. So it is necessary to record this implementation in the environment.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.registryComponent;\n\nvoid foo(){\n\t\n\tregistryComponent(new AccountServiceOtherImpl());\n\n\t// or\n\n\tregistryComponent(AccountServiceOtherImpl.class);\n\n\t// So make sure there is a parameterless constructor so that it is instantiated correctly. Otherwise he would have received an exception.\n\t\n}\n</code></pre>\n\n<p>Being available to the Environment, the component can already be accessed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\nvoid consumer(){\n\t\n\tAccountService service = my(AccountService.class);\n\tservice.save(new Account(\"...\"));\n\tList<Account> accounts = service.list();\n\n\t// or direct access\n\n\tOptional<Account> oAccount = my(AccountService.class).findById(1);\n\tmy(AccountService.class).save(new Account(\"...\"));\n}\n</code></pre>\n\n<p>We are no longer concerned with what the implementation is calling, either because we are using the standard or a registered implementation. But in case I need more than one implementation registered in my application? Qualifiers!</p>\n\n\t<h5>Qualifiers</h5>\n\t\n\n\t<p>In case we need to have more than one registered implementation we can use the qualifiers, they server so the container distinguishes more than one implementation. Throught annotation <code>@Qualify</code> we're going to tell you what the implementation we're using is for the container.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Qualify(˜DefaultImpl˜)\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n\n// or \n\n@Qualify(\"CustomImpl\")\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\ns}\n</code></pre>\n\n<p>In the above codes we are using two qualifications to perform the manipulation of the defined interface. In order to use it we need to ensure that the reading and access to the environment is informed the qualifier </p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate AccountServce service;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tList<Account> accounts = my(AccountService.class, ˜DefaultImpl˜).list(); // Default first list\n\n\t\n\tList<Account> accounts = my(AccountService.class, \"Customl\").list(); // Custom list\n\n}\n</code></pre>\n\n<p>Every request for the container is executed on demand. Either the design of a component is very important for the application to remain lightweight and scalable.</p>\n\n\t\n\n\t<h5>Resource</h5>\n\t\n\n\t<p>Similar to the component a resource is also registered and manipulated by the Enviromente, however a resource does not have to be defined by an interface, a resource is direct access to a system functionality and should be used when there is no perspective of decoupling.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tpublic void foo(){\n\t\t// ... do something\n\t}\n}\n</code></pre>\n\n<p>A resource is automatically registered in the container and loaded by demand as well as the components, other than a component a resource does not follow a nomenclature for load, only a standard so that it can be instantiated, that is, for a resource to be correctly loaded, Have a public constructor and no parameters.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate SimpleApi api;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tapi.foo();\n\n\t// or\n\n\tmy(SimpleApi.class).foo();\n\n}\n</code></pre>\n\n<p>For the case of resources instantiated manually, access the environment and call the registryResource method passing the instance.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(String name){\n\t\tthis.name = name;\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n\n// for registry\n\nvoid setup(){\n\t\n\tregistryResource(new SimpleApi(\"jspare\"));\n}\n\n</code></pre>\n\n<h5>Auxiliar</h5>\n\n\n<p>The life cycle of a component happens as follows when the environment requests that an instance be returned and in case it has not yet been lifted the following steps are performed.</p>\n\n<ul>\n\t<li>Create new component instance</li>\n\t<li>Resolve dependencies, with injection</li>\n\t<li>Call auxiliar method annotated by <code>@After</code></li>\n\t<li>Returns component reference.</li>\n</ul>\n\n<h6>Create new component instance</h6>\n\n<p>The public constructor call is executed without parameters for standard deployments, or the registered instance is retrieved.</p>\n\n<h6>Resolve dependencies, with injection</h6>\n<p>Internally the helper component is called <code>ContainerUtils.processInjection</code> with the instance, resolving all dependencies.</p>\n\n<h6>After calls</h6>\n<p>In order to aid in the life cycle a trigger has been introduced to p [the instantiation of a resource or component. After an instance is generated, if there is a method with the @After annotation this will be called and executed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Foo  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(){\n\t\t\n\t}\n\n\t@After\n\tprivate void setup(){\n\n\t\tthis.name = UUID.randomUUID().toString();\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n</code></pre>\n\n<p>In this example, when the resource was created the after method will generate a random uuid for the field name.</p>\n\n<h6>Returns component reference.</h6>\n<p>It is returned to the requested instance being casted using Java Generic, leaving its apis fluent and usual.</p>\n\n\n<p><b>Important: To access a resource or component by the environment, the classes that will be retrieved must have annotated the stereotypes: <code>@Component</code> or <code>@Resource</code>. Otherwise, the container will refuse.</b></p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-injection\">Injections & Injectors</h4>\n\t\n\n\t<p>When a class is processed by Environment, processing of an instance is performed. This processing is part of the life cycle of a component or resource. And it is essential for the inversion of control and injection of dependencies.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Consumer  {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>Through these annotations processing is performed the resource is requested for the environment and its components and features are available. Okay, but for those cases where I'm not in the life-cycle flow for injection, how do I do it?</p>\n\n<p>To perform the processing of your class outside the lifecycle it is necessary to call manually so that it is processed. For this there are two ways: the call of an auxiliary method to perform the processing or extend its class of the abstract <code>MySupport<code>.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends MySupport {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>When extending this way, your class is within the life cycle, but if it is not possible to extend through your class already being inherited from another parent, you can add a trigger for processing, e.g:</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends Another {\n\n\tpublic Client(){\n\n\t\tContainerUtils.processInjection(this);\n\t}\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>The process injection method will process the requested instance and resolve the required dependencies.</p>\n\n<p>An excellent example is using an android application (you need to be using the <code>jspare-core-androi-support</code> module in this case) to process and inject your services, components and resources when creating the instance of an Activity you can call the <code>processInjection</code>.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\nimport static org.jspare.core.container.ContainerUtils.processInjection;\n\npublic final class MultiTrackerActivity extends AppCompatActivity {\n\n\t@Inject\n\tprivate AccountService accountService;\n\n\t/**\n     * Initializes the UI and creates the detector pipeline.\n     */\n    @Override\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView(R.layout.main);\n\n        processInjection(this);\n    }\n\n}\n</code></pre>\n\n\t<h4 id=\"sec-core-conf\">Configuration</h4>\n\t\n\t<p>When we talk about integration or we are proposed to develop an application, we have a task always on our side. The configuration. But what do we need to configure application for? I'm going to answer that one, we usually indicate how the parameterization of our environment, such as: variables, libraries and references. And that's key to keeping our application ready for environment migration or anything.</p>\n\t<p>The JSpare Framework offers a simple way to solve and manipulate your settings, we outsource through component <code>CommonsConfig</code> that extends <code>Configuration</code> from Apache Commons project and externalize this through a component that can be injected through inversion control injection into your application. </p>\n\n\t<br>\n\t<h4 id=\"sec-core-boostrap\">Bootstrap</h4>\n\n\t<p>We say that our application is based on the concept of an standalone application. And all this starts from the beginning. So obvious ... We're talking about Bootstrap. </p>\n\n\t<p>Bootstrap is the point that defines the beginning of our application, we speak of a class with a main method that is executed to start a program in java. Cool, but what's so different? And now let's get to work ...</p>\n\n\t<p>The following code snippet refers to traditional initialization class implemented with the Jspare Framework. (From here we will always try to make clear our codes, we will put the import packages and reference the contents)</p>\n\n\t <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport org.jspare.core.container.Application;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n  \t... Execute something here ...\n  }\n}\n</code>\n        </pre>\n\n     <p>The example will trigger your application if it has structured as an application stando alone and its end result is a fat-jar. But note that this is not a rule, there are other ways to start the container, let's address later. But speaking the real, it will depend a lot on your application or other technology you are using. To finish the reasoning, we are easy to integrate with your project.</p>\n\n</div>\n</section>\n\n<section id=\"sec-contribute\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>The JSpare more powerfull</p>\n\t\t</header>\n\t\t\n\t\t<br>\n\t\t<h4 id=\"sec-contribute-issues\">Issues / Bugs</h4>\n\t\t<p>You can report any issue or bug, just go to our github and register a new task, make sure our team and above all the community will help you. For our growth it is fundamental that we are always united with the whole community.</p>\n\n\t\t<p>Please register your issue at: <a href=\"https://github.com/jspare-projects/jspare-container/issues\">GitHub / Issues</a> \n\t\t\t\n\t\t\t<h4 id=\"sec-contribute-changelog\">Changelog</h4>\n\n\t\t\t<p>Access the <a href=\"/docs\">Changelog Page</a> and track all of our backlog and predictions of new features and fixes.</p>\n\t\t</div>\n\t</section>\n\n\t<section id=\"sec-others\">\n\t\t<div class=\"container\">\n\t\t\t<header class=\"section-header\">\n\t\t\t\t<h2>Others</h2>\n\t\t\t\t<p>Behind of framework</p>\n\t\t\t</header>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-architecture\">Architecture</h4>\n\n\t\t\t<p>We are writing an article with all the detail behind development. Sign up and do not miss updates.</p>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-dep\">Dependencies Resolutions</h4>\n\n\t\t\t<p>Our entire project was thought to be the purest and simplest solution in terms of container and control inversion.</p>\n\n\t\t\t<p>We have a short list of dependencies that are part of our development, know a bit more because we use some of these technologies.</p>\n\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-ref\">Other references</h4>\n\n\t\t\t<p>In this section we will bring some other references of projects that use or are based on the jspare framework.</p>\n\n\t\t</div>\n\t</section>","updated":"2017-01-11T02:50:56.000Z","path":"docs/index.html","comments":1,"layout":"page","_id":"cixscqmz10003v09ktu67xpl3","content":"\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-gettingstarted\">Get Started</a></li>\n\t\t<li><a href=\"#sec-core\">JSpare Container</a></li>\n\t\t<li><a href=\"#sec-contribute\">Contribute</a></li>\n\t\t<li><a href=\"#sec-others\">Others</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section>\n\t<div class=\"container\">\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Content</h2>\n\t\t</header>\n\t\t\n\t\t<ul class=\"link-list\">\n\t\t\t<li>\n\t\t\t\t<h5>Get Started</h5>\n\t\t\t\t<a href=\"#sec-gettingstarted-dep\">Dependencies</a>\n\t\t\t\t<a href=\"#sec-gettingstarted-project\">Structuring a project</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<h5>JSpare Container</h5>\n\t\t\t\t<a href=\"#sec-core-env\">Environment Overview</a>\n\t\t\t\t<a href=\"#sec-core-container\">Container</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-components\">Components & Resources</a>\n\t\t\t\t<a href=\"#sec-core-injection\">Injections & Injectors</a>\t\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-conf\">Configuration</a>\n\t\t\t\t<a href=\"#sec-core-boostrap\">Bootstrap</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Contribute</h5>\n\t\t\t\t<a href=\"#sec-contribute-issues\">Issues / Bugs</a>\n\t\t\t\t<a href=\"#sec-contribute-changelog\">Changelog</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Others</h5>\n\t\t\t\t<a href=\"#sec-others-architecture\">Architecture</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-others-dep\">Dependencies Resolutions</a>\n\t\t\t\t<a href=\"#sec-others-dep\">Other references</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section id=\"sec-gettingstarted\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Get Started</h2>\n\t\t\t<p>Starting with JSpare Framework</p>\n\t\t</header>\n\t\t\n\n\t\t<p>The first thing you always ask yourself is how to start using a framework, you'll see that with Jspare there's nothing out of this world, let's start with dependencies ...</p>\n\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>Note: For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\n\t<p>Incredible, you added our dependency and now where we can start, following this document we will try to be logical and consistent with the explanations, let's understand how the ship works and then fly ok?</p>\n\t\n\n</div></section>\n\n<section id=\"sec-core\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>JSpare Container</h2>\n\t\t\t<p>Understanding the core of our application</p>\n\t\t</header>\n\t</div>\n\n\t<br>\n\t<h4 id=\"sec-core-env\">Environment Overview</h4>\n\n\t<p>Well, if you are here it is because you want to understand a bit more how the Jspare Framework works. The Container, is the core of our framework and it is responsible for most of the framework engine. Okay, but let's start at the beginning. What is the framework for? Let's understand ...</p>\n\n\t<p>The main function of JSpare Framework is to provide a simple, intuitive and powerful container for your java applications. This is the essence and with it we gain some more characteristics. Our container is responsible for providing and managing the instance of components and resources used in our applications, when we deal with this issue we are talking about dependency injection, control inversion and the usage of some design patterns that are issues very important for the construction of one software. We cherish user-friendliness and increasingly make the framework simple to use on a day-to-day basis, remove the many configurations, apply conventions, and thus create a culture of thinking a little bit more when it comes to building software. Such as: Component reuse, clean code, and development complexity reduction.</p>\n\n\t<p>But let's talk about what matters, the Framework. Our application is based on the concept of standalone applications, in the end we will have a single artifact with all the necessary dependencies and libraries packaged in a fat-jar. I promise in the next topics to put a little more in practice to understand and have reference of how things work ...</p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-container\">Container</h4>\n\t\n\t<p>The core of JSpare Framework, the Container. This is where everything happens and is a more important part of the framework. The container is responsible for controlling the resources, components and everything that is being delegated to the infrastructure of the framework. In practice, when we want to access an implementation we will request for the container, directly or indirectly. The same will happen when we are providing a resource to be shared in the container. And it is in the <code>Environment</code> that this happen, the Environment exposes methods for safe handling of resources, as the methods: <code>registryComponent</code>, <code>registryResource</code>, <code>my</code> and others to do this.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\nimport static org.jspare.container.Environment.registryResource;\nimport static org.jspare.container.Environment.registryComponent;\n\nregistryComponent(new SomeInterfaceImpl());\nregistryResource(new SomeResource());\n\nmy(SomeInterface.class).doSomething(); \n\nT result = my(SomeResource.class).doAnother();\n\n</code></pre>\n\n\t<p>To understand how all this works, let's look at the topic introduction about features and components and the use of Environment for manipulation.</p>\n\n\t<p>Note, the container itself does not have the feature of clustering its resources, for this must use a specific library like Hazelcast or the one of its preference, we intend to approach this subject ahead, thinking about integrations and componentization using OSGi.</p>\n\n\t<br>\n\t<h4 id=\"sec-core-components\">Components & Resources</h4>\n\t\n\t<p>Things do not happen if we do not have the stereotypes to manipulate resources and components. For different purposes two of these are available, <code>@Component</code> and <code>@Resource</code>. Both annotations should be used in classes and they define the characteristics that their implementations will have in the application.</p>\n\n\t<h5>Component</h5>\n\t\n\t<p>Modularizing is critical to a cohesive and decoupled implementation. The <code>@Component</code> it does just that. Writing an interface and noting with the component stereotype is giving character and life to your interface.</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Component\npublic interface AccountService {\n\n\tList<account> list();\n\n\tOptional<account> findById(int id);\n\n\tvoid save(Account account);\n}\n</account></account></code></pre>\n\n<p>We have the definition of an interface annotated by <code>@Component</code>. When you try to access the interface with Environemnt using the <code>my</code> static method or <code>@Inject</code> for one handling class the container will understand to look for a registered implementation and will resolve your declaration. Nice, but how will the container look for an implementation?</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</account></account></code></pre>\n<p>If the interface implementation is standard, you do not need to directly register the implementation in the container, it is enough that the implementation package structure follows the same interface as: <code>foo.service.*</code> and the class nomenclature that implements use the suffix <code>[InterfaceClassName]Impl</code>. Thus:</p>\n\n\t\t<pre><code class=\"language-java\">\nfoo.service.AccountService\nfoo.service.AccountServiceImpl\n</code></pre>\n\n<p>With this, the container will understand that the default implementation that should be used is that found by the convention. But, and in case of having my implementation in another package or following another pattern of nomenclature and structure?\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</account></account></code></pre>\n\n</p><p>Of face the container will not understand that this its class is the implementation that represents this component. So it is necessary to record this implementation in the environment.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.registryComponent;\n\nvoid foo(){\n\t\n\tregistryComponent(new AccountServiceOtherImpl());\n\n\t// or\n\n\tregistryComponent(AccountServiceOtherImpl.class);\n\n\t// So make sure there is a parameterless constructor so that it is instantiated correctly. Otherwise he would have received an exception.\n\t\n}\n</code></pre>\n\n<p>Being available to the Environment, the component can already be accessed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\nvoid consumer(){\n\t\n\tAccountService service = my(AccountService.class);\n\tservice.save(new Account(\"...\"));\n\tList<account> accounts = service.list();\n\n\t// or direct access\n\n\tOptional<account> oAccount = my(AccountService.class).findById(1);\n\tmy(AccountService.class).save(new Account(\"...\"));\n}\n</account></account></code></pre>\n\n<p>We are no longer concerned with what the implementation is calling, either because we are using the standard or a registered implementation. But in case I need more than one implementation registered in my application? Qualifiers!</p>\n\n\t<h5>Qualifiers</h5>\n\t\n\n\t<p>In case we need to have more than one registered implementation we can use the qualifiers, they server so the container distinguishes more than one implementation. Throught annotation <code>@Qualify</code> we're going to tell you what the implementation we're using is for the container.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Qualify(˜DefaultImpl˜)\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n\n// or \n\n@Qualify(\"CustomImpl\")\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\ns}\n</account></account></account></account></code></pre>\n\n<p>In the above codes we are using two qualifications to perform the manipulation of the defined interface. In order to use it we need to ensure that the reading and access to the environment is informed the qualifier </p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate AccountServce service;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tList<account> accounts = my(AccountService.class, ˜DefaultImpl˜).list(); // Default first list\n\n\t\n\tList<account> accounts = my(AccountService.class, \"Customl\").list(); // Custom list\n\n}\n</account></account></code></pre>\n\n<p>Every request for the container is executed on demand. Either the design of a component is very important for the application to remain lightweight and scalable.</p>\n\n\t\n\n\t<h5>Resource</h5>\n\t\n\n\t<p>Similar to the component a resource is also registered and manipulated by the Enviromente, however a resource does not have to be defined by an interface, a resource is direct access to a system functionality and should be used when there is no perspective of decoupling.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tpublic void foo(){\n\t\t// ... do something\n\t}\n}\n</code></pre>\n\n<p>A resource is automatically registered in the container and loaded by demand as well as the components, other than a component a resource does not follow a nomenclature for load, only a standard so that it can be instantiated, that is, for a resource to be correctly loaded, Have a public constructor and no parameters.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate SimpleApi api;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tapi.foo();\n\n\t// or\n\n\tmy(SimpleApi.class).foo();\n\n}\n</code></pre>\n\n<p>For the case of resources instantiated manually, access the environment and call the registryResource method passing the instance.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(String name){\n\t\tthis.name = name;\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n\n// for registry\n\nvoid setup(){\n\t\n\tregistryResource(new SimpleApi(\"jspare\"));\n}\n\n</code></pre>\n\n<h5>Auxiliar</h5>\n\n\n<p>The life cycle of a component happens as follows when the environment requests that an instance be returned and in case it has not yet been lifted the following steps are performed.</p>\n\n<ul>\n\t<li>Create new component instance</li>\n\t<li>Resolve dependencies, with injection</li>\n\t<li>Call auxiliar method annotated by <code>@After</code></li>\n\t<li>Returns component reference.</li>\n</ul>\n\n<h6>Create new component instance</h6>\n\n<p>The public constructor call is executed without parameters for standard deployments, or the registered instance is retrieved.</p>\n\n<h6>Resolve dependencies, with injection</h6>\n<p>Internally the helper component is called <code>ContainerUtils.processInjection</code> with the instance, resolving all dependencies.</p>\n\n<h6>After calls</h6>\n<p>In order to aid in the life cycle a trigger has been introduced to p [the instantiation of a resource or component. After an instance is generated, if there is a method with the @After annotation this will be called and executed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Foo  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(){\n\t\t\n\t}\n\n\t@After\n\tprivate void setup(){\n\n\t\tthis.name = UUID.randomUUID().toString();\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n</code></pre>\n\n<p>In this example, when the resource was created the after method will generate a random uuid for the field name.</p>\n\n<h6>Returns component reference.</h6>\n<p>It is returned to the requested instance being casted using Java Generic, leaving its apis fluent and usual.</p>\n\n\n<p><b>Important: To access a resource or component by the environment, the classes that will be retrieved must have annotated the stereotypes: <code>@Component</code> or <code>@Resource</code>. Otherwise, the container will refuse.</b></p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-injection\">Injections & Injectors</h4>\n\t\n\n\t<p>When a class is processed by Environment, processing of an instance is performed. This processing is part of the life cycle of a component or resource. And it is essential for the inversion of control and injection of dependencies.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Consumer  {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>Through these annotations processing is performed the resource is requested for the environment and its components and features are available. Okay, but for those cases where I'm not in the life-cycle flow for injection, how do I do it?</p>\n\n<p>To perform the processing of your class outside the lifecycle it is necessary to call manually so that it is processed. For this there are two ways: the call of an auxiliary method to perform the processing or extend its class of the abstract <code>MySupport<code>.</code></code></p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends MySupport {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>When extending this way, your class is within the life cycle, but if it is not possible to extend through your class already being inherited from another parent, you can add a trigger for processing, e.g:</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends Another {\n\n\tpublic Client(){\n\n\t\tContainerUtils.processInjection(this);\n\t}\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>The process injection method will process the requested instance and resolve the required dependencies.</p>\n\n<p>An excellent example is using an android application (you need to be using the <code>jspare-core-androi-support</code> module in this case) to process and inject your services, components and resources when creating the instance of an Activity you can call the <code>processInjection</code>.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\nimport static org.jspare.core.container.ContainerUtils.processInjection;\n\npublic final class MultiTrackerActivity extends AppCompatActivity {\n\n\t@Inject\n\tprivate AccountService accountService;\n\n\t/**\n     * Initializes the UI and creates the detector pipeline.\n     */\n    @Override\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView(R.layout.main);\n\n        processInjection(this);\n    }\n\n}\n</code></pre>\n\n\t<h4 id=\"sec-core-conf\">Configuration</h4>\n\t\n\t<p>When we talk about integration or we are proposed to develop an application, we have a task always on our side. The configuration. But what do we need to configure application for? I'm going to answer that one, we usually indicate how the parameterization of our environment, such as: variables, libraries and references. And that's key to keeping our application ready for environment migration or anything.</p>\n\t<p>The JSpare Framework offers a simple way to solve and manipulate your settings, we outsource through component <code>CommonsConfig</code> that extends <code>Configuration</code> from Apache Commons project and externalize this through a component that can be injected through inversion control injection into your application. </p>\n\n\t<br>\n\t<h4 id=\"sec-core-boostrap\">Bootstrap</h4>\n\n\t<p>We say that our application is based on the concept of an standalone application. And all this starts from the beginning. So obvious ... We're talking about Bootstrap. </p>\n\n\t<p>Bootstrap is the point that defines the beginning of our application, we speak of a class with a main method that is executed to start a program in java. Cool, but what's so different? And now let's get to work ...</p>\n\n\t<p>The following code snippet refers to traditional initialization class implemented with the Jspare Framework. (From here we will always try to make clear our codes, we will put the import packages and reference the contents)</p>\n\n\t <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport org.jspare.core.container.Application;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n  \t... Execute something here ...\n  }\n}\n</code>\n        </pre>\n\n     <p>The example will trigger your application if it has structured as an application stando alone and its end result is a fat-jar. But note that this is not a rule, there are other ways to start the container, let's address later. But speaking the real, it will depend a lot on your application or other technology you are using. To finish the reasoning, we are easy to integrate with your project.</p>\n\n\n</section>\n\n<section id=\"sec-contribute\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>The JSpare more powerfull</p>\n\t\t</header>\n\t\t\n\t\t<br>\n\t\t<h4 id=\"sec-contribute-issues\">Issues / Bugs</h4>\n\t\t<p>You can report any issue or bug, just go to our github and register a new task, make sure our team and above all the community will help you. For our growth it is fundamental that we are always united with the whole community.</p>\n\n\t\t<p>Please register your issue at: <a href=\"https://github.com/jspare-projects/jspare-container/issues\" target=\"_blank\" rel=\"external\">GitHub / Issues</a> \n\t\t\t\n\t\t\t</p><h4 id=\"sec-contribute-changelog\">Changelog</h4>\n\n\t\t\t<p>Access the <a href=\"/docs\">Changelog Page</a> and track all of our backlog and predictions of new features and fixes.</p>\n\t\t</div>\n\t</section>\n\n\t<section id=\"sec-others\">\n\t\t<div class=\"container\">\n\t\t\t<header class=\"section-header\">\n\t\t\t\t<h2>Others</h2>\n\t\t\t\t<p>Behind of framework</p>\n\t\t\t</header>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-architecture\">Architecture</h4>\n\n\t\t\t<p>We are writing an article with all the detail behind development. Sign up and do not miss updates.</p>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-dep\">Dependencies Resolutions</h4>\n\n\t\t\t<p>Our entire project was thought to be the purest and simplest solution in terms of container and control inversion.</p>\n\n\t\t\t<p>We have a short list of dependencies that are part of our development, know a bit more because we use some of these technologies.</p>\n\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-ref\">Other references</h4>\n\n\t\t\t<p>In this section we will bring some other references of projects that use or are based on the jspare framework.</p>\n\n\t\t</div>\n\t</section>","excerpt":"","more":"\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-gettingstarted\">Get Started</a></li>\n\t\t<li><a href=\"#sec-core\">JSpare Container</a></li>\n\t\t<li><a href=\"#sec-contribute\">Contribute</a></li>\n\t\t<li><a href=\"#sec-others\">Others</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n\n<section>\n\t<div class=\"container\">\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Content</h2>\n\t\t</header>\n\t\t\n\t\t<ul class=\"link-list\">\n\t\t\t<li>\n\t\t\t\t<h5>Get Started</h5>\n\t\t\t\t<a href=\"#sec-gettingstarted-dep\">Dependencies</a>\n\t\t\t\t<a href=\"#sec-gettingstarted-project\">Structuring a project</a>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<h5>JSpare Container</h5>\n\t\t\t\t<a href=\"#sec-core-env\">Environment Overview</a>\n\t\t\t\t<a href=\"#sec-core-container\">Container</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-components\">Components & Resources</a>\n\t\t\t\t<a href=\"#sec-core-injection\">Injections & Injectors</a>\t\t\t\t\t\n\t\t\t\t<a href=\"#sec-core-conf\">Configuration</a>\n\t\t\t\t<a href=\"#sec-core-boostrap\">Bootstrap</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Contribute</h5>\n\t\t\t\t<a href=\"#sec-contribute-issues\">Issues / Bugs</a>\n\t\t\t\t<a href=\"#sec-contribute-changelog\">Changelog</a>\n\t\t\t</li>\n\t\t\t\n\t\t\t<li>\n\t\t\t\t<h5>Others</h5>\n\t\t\t\t<a href=\"#sec-others-architecture\">Architecture</a>\t\t\t\t\n\t\t\t\t<a href=\"#sec-others-dep\">Dependencies Resolutions</a>\n\t\t\t\t<a href=\"#sec-others-dep\">Other references</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section id=\"sec-gettingstarted\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Get Started</h2>\n\t\t\t<p>Starting with JSpare Framework</p>\n\t\t</header>\n\t\t\n\n\t\t<p>The first thing you always ask yourself is how to start using a framework, you'll see that with Jspare there's nothing out of this world, let's start with dependencies ...</p>\n\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>Note: For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\n\t<p>Incredible, you added our dependency and now where we can start, following this document we will try to be logical and consistent with the explanations, let's understand how the ship works and then fly ok?</p>\n\t\n\n</section>\n\n<section id=\"sec-core\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>JSpare Container</h2>\n\t\t\t<p>Understanding the core of our application</p>\n\t\t</header>\n\t</div>\n\n\t<br>\n\t<h4 id=\"sec-core-env\">Environment Overview</h4>\n\n\t<p>Well, if you are here it is because you want to understand a bit more how the Jspare Framework works. The Container, is the core of our framework and it is responsible for most of the framework engine. Okay, but let's start at the beginning. What is the framework for? Let's understand ...</p>\n\n\t<p>The main function of JSpare Framework is to provide a simple, intuitive and powerful container for your java applications. This is the essence and with it we gain some more characteristics. Our container is responsible for providing and managing the instance of components and resources used in our applications, when we deal with this issue we are talking about dependency injection, control inversion and the usage of some design patterns that are issues very important for the construction of one software. We cherish user-friendliness and increasingly make the framework simple to use on a day-to-day basis, remove the many configurations, apply conventions, and thus create a culture of thinking a little bit more when it comes to building software. Such as: Component reuse, clean code, and development complexity reduction.</p>\n\n\t<p>But let's talk about what matters, the Framework. Our application is based on the concept of standalone applications, in the end we will have a single artifact with all the necessary dependencies and libraries packaged in a fat-jar. I promise in the next topics to put a little more in practice to understand and have reference of how things work ...</p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-container\">Container</h4>\n\t\n\t<p>The core of JSpare Framework, the Container. This is where everything happens and is a more important part of the framework. The container is responsible for controlling the resources, components and everything that is being delegated to the infrastructure of the framework. In practice, when we want to access an implementation we will request for the container, directly or indirectly. The same will happen when we are providing a resource to be shared in the container. And it is in the <code>Environment</code> that this happen, the Environment exposes methods for safe handling of resources, as the methods: <code>registryComponent</code>, <code>registryResource</code>, <code>my</code> and others to do this.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\nimport static org.jspare.container.Environment.registryResource;\nimport static org.jspare.container.Environment.registryComponent;\n\nregistryComponent(new SomeInterfaceImpl());\nregistryResource(new SomeResource());\n\nmy(SomeInterface.class).doSomething(); \n\nT result = my(SomeResource.class).doAnother();\n\n</code></pre>\n\n\t<p>To understand how all this works, let's look at the topic introduction about features and components and the use of Environment for manipulation.</p>\n\n\t<p>Note, the container itself does not have the feature of clustering its resources, for this must use a specific library like Hazelcast or the one of its preference, we intend to approach this subject ahead, thinking about integrations and componentization using OSGi.</p>\n\n\t<br>\n\t<h4 id=\"sec-core-components\">Components & Resources</h4>\n\t\n\t<p>Things do not happen if we do not have the stereotypes to manipulate resources and components. For different purposes two of these are available, <code>@Component</code> and <code>@Resource</code>. Both annotations should be used in classes and they define the characteristics that their implementations will have in the application.</p>\n\n\t<h5>Component</h5>\n\t\n\t<p>Modularizing is critical to a cohesive and decoupled implementation. The <code>@Component</code> it does just that. Writing an interface and noting with the component stereotype is giving character and life to your interface.</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Component\npublic interface AccountService {\n\n\tList<Account> list();\n\n\tOptional<Account> findById(int id);\n\n\tvoid save(Account account);\n}\n</code></pre>\n\n<p>We have the definition of an interface annotated by <code>@Component</code>. When you try to access the interface with Environemnt using the <code>my</code> static method or <code>@Inject</code> for one handling class the container will understand to look for a registered implementation and will resolve your declaration. Nice, but how will the container look for an implementation?</p>\n\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</code></pre>\n<p>If the interface implementation is standard, you do not need to directly register the implementation in the container, it is enough that the implementation package structure follows the same interface as: <code>foo.service.*</code> and the class nomenclature that implements use the suffix <code>[InterfaceClassName]Impl</code>. Thus:</p>\n\n\t\t<pre><code class=\"language-java\">\nfoo.service.AccountService\nfoo.service.AccountServiceImpl\n</code></pre>\n\n<p>With this, the container will understand that the default implementation that should be used is that found by the convention. But, and in case of having my implementation in another package or following another pattern of nomenclature and structure?\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n</code></pre>\n\n<p>Of face the container will not understand that this its class is the implementation that represents this component. So it is necessary to record this implementation in the environment.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.registryComponent;\n\nvoid foo(){\n\t\n\tregistryComponent(new AccountServiceOtherImpl());\n\n\t// or\n\n\tregistryComponent(AccountServiceOtherImpl.class);\n\n\t// So make sure there is a parameterless constructor so that it is instantiated correctly. Otherwise he would have received an exception.\n\t\n}\n</code></pre>\n\n<p>Being available to the Environment, the component can already be accessed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\nvoid consumer(){\n\t\n\tAccountService service = my(AccountService.class);\n\tservice.save(new Account(\"...\"));\n\tList<Account> accounts = service.list();\n\n\t// or direct access\n\n\tOptional<Account> oAccount = my(AccountService.class).findById(1);\n\tmy(AccountService.class).save(new Account(\"...\"));\n}\n</code></pre>\n\n<p>We are no longer concerned with what the implementation is calling, either because we are using the standard or a registered implementation. But in case I need more than one implementation registered in my application? Qualifiers!</p>\n\n\t<h5>Qualifiers</h5>\n\t\n\n\t<p>In case we need to have more than one registered implementation we can use the qualifiers, they server so the container distinguishes more than one implementation. Throught annotation <code>@Qualify</code> we're going to tell you what the implementation we're using is for the container.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Qualify(˜DefaultImpl˜)\npublic class AccountServiceImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.of(new Account('u' + id))\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\n}\n\n// or \n\n@Qualify(\"CustomImpl\")\npublic class AccountServiceOtherImpl implements AccountService {\n\n\t@Override\n\tpublic List<Account> list(){\n\t\treturn Arrays.asList(new Account('other-admin'));\n\t}\n\n\t@Override\n\tpublic Optional<Account> findById(int id){\n\t\treturn Optional.empty();\n\t}\n\n\t@Override\n\tpublic void save(Account account){\n\t\t// ... save\n\t}\ns}\n</code></pre>\n\n<p>In the above codes we are using two qualifications to perform the manipulation of the defined interface. In order to use it we need to ensure that the reading and access to the environment is informed the qualifier </p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate AccountServce service;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tList<Account> accounts = my(AccountService.class, ˜DefaultImpl˜).list(); // Default first list\n\n\t\n\tList<Account> accounts = my(AccountService.class, \"Customl\").list(); // Custom list\n\n}\n</code></pre>\n\n<p>Every request for the container is executed on demand. Either the design of a component is very important for the application to remain lightweight and scalable.</p>\n\n\t\n\n\t<h5>Resource</h5>\n\t\n\n\t<p>Similar to the component a resource is also registered and manipulated by the Enviromente, however a resource does not have to be defined by an interface, a resource is direct access to a system functionality and should be used when there is no perspective of decoupling.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tpublic void foo(){\n\t\t// ... do something\n\t}\n}\n</code></pre>\n\n<p>A resource is automatically registered in the container and loaded by demand as well as the components, other than a component a resource does not follow a nomenclature for load, only a standard so that it can be instantiated, that is, for a resource to be correctly loaded, Have a public constructor and no parameters.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n\nimport static org.jspare.container.Environment.my;\n\n// for registereds classes\n\n@Inject\nprivate SimpleApi api;\n\n// inline call\n\nvoid consumer(){\n\t\n\t\n\tapi.foo();\n\n\t// or\n\n\tmy(SimpleApi.class).foo();\n\n}\n</code></pre>\n\n<p>For the case of resources instantiated manually, access the environment and call the registryResource method passing the instance.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class SimpleApi  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(String name){\n\t\tthis.name = name;\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n\n// for registry\n\nvoid setup(){\n\t\n\tregistryResource(new SimpleApi(\"jspare\"));\n}\n\n</code></pre>\n\n<h5>Auxiliar</h5>\n\n\n<p>The life cycle of a component happens as follows when the environment requests that an instance be returned and in case it has not yet been lifted the following steps are performed.</p>\n\n<ul>\n\t<li>Create new component instance</li>\n\t<li>Resolve dependencies, with injection</li>\n\t<li>Call auxiliar method annotated by <code>@After</code></li>\n\t<li>Returns component reference.</li>\n</ul>\n\n<h6>Create new component instance</h6>\n\n<p>The public constructor call is executed without parameters for standard deployments, or the registered instance is retrieved.</p>\n\n<h6>Resolve dependencies, with injection</h6>\n<p>Internally the helper component is called <code>ContainerUtils.processInjection</code> with the instance, resolving all dependencies.</p>\n\n<h6>After calls</h6>\n<p>In order to aid in the life cycle a trigger has been introduced to p [the instantiation of a resource or component. After an instance is generated, if there is a method with the @After annotation this will be called and executed.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Foo  {\n\n\tprivate String name;\n\n\tpublic SimpleApi(){\n\t\t\n\t}\n\n\t@After\n\tprivate void setup(){\n\n\t\tthis.name = UUID.randomUUID().toString();\n\t}\n\n\tpublic void getName(){\n\t\treturn this.name;\n\t}\n}\n</code></pre>\n\n<p>In this example, when the resource was created the after method will generate a random uuid for the field name.</p>\n\n<h6>Returns component reference.</h6>\n<p>It is returned to the requested instance being casted using Java Generic, leaving its apis fluent and usual.</p>\n\n\n<p><b>Important: To access a resource or component by the environment, the classes that will be retrieved must have annotated the stereotypes: <code>@Component</code> or <code>@Resource</code>. Otherwise, the container will refuse.</b></p>\n\n\t\n\t<br>\n\t<h4 id=\"sec-core-injection\">Injections & Injectors</h4>\n\t\n\n\t<p>When a class is processed by Environment, processing of an instance is performed. This processing is part of the life cycle of a component or resource. And it is essential for the inversion of control and injection of dependencies.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\n@Resource\npublic class Consumer  {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>Through these annotations processing is performed the resource is requested for the environment and its components and features are available. Okay, but for those cases where I'm not in the life-cycle flow for injection, how do I do it?</p>\n\n<p>To perform the processing of your class outside the lifecycle it is necessary to call manually so that it is processed. For this there are two ways: the call of an auxiliary method to perform the processing or extend its class of the abstract <code>MySupport<code>.</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends MySupport {\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>When extending this way, your class is within the life cycle, but if it is not possible to extend through your class already being inherited from another parent, you can add a trigger for processing, e.g:</p>\n\n\t<pre class=\"line-numbers\"><code class=\"language-java\">\nimport org.jspare.core.container.MySupport;\n\npublic class Client extends Another {\n\n\tpublic Client(){\n\n\t\tContainerUtils.processInjection(this);\n\t}\n\n\t@Inject\n\tprivate AccountService service;\n\n\t@Inject\n\tprivate FooResource foo;\n\n\tpublic void doSomething(){\n\t\t\n\t\tservice.list().forEach(foo::doIt);\n\t}\n}\n</code></pre>\n\n<p>The process injection method will process the requested instance and resolve the required dependencies.</p>\n\n<p>An excellent example is using an android application (you need to be using the <code>jspare-core-androi-support</code> module in this case) to process and inject your services, components and resources when creating the instance of an Activity you can call the <code>processInjection</code>.</p>\n\n<pre class=\"line-numbers\"><code class=\"language-java\">\nimport static org.jspare.core.container.ContainerUtils.processInjection;\n\npublic final class MultiTrackerActivity extends AppCompatActivity {\n\n\t@Inject\n\tprivate AccountService accountService;\n\n\t/**\n     * Initializes the UI and creates the detector pipeline.\n     */\n    @Override\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView(R.layout.main);\n\n        processInjection(this);\n    }\n\n}\n</code></pre>\n\n\t<h4 id=\"sec-core-conf\">Configuration</h4>\n\t\n\t<p>When we talk about integration or we are proposed to develop an application, we have a task always on our side. The configuration. But what do we need to configure application for? I'm going to answer that one, we usually indicate how the parameterization of our environment, such as: variables, libraries and references. And that's key to keeping our application ready for environment migration or anything.</p>\n\t<p>The JSpare Framework offers a simple way to solve and manipulate your settings, we outsource through component <code>CommonsConfig</code> that extends <code>Configuration</code> from Apache Commons project and externalize this through a component that can be injected through inversion control injection into your application. </p>\n\n\t<br>\n\t<h4 id=\"sec-core-boostrap\">Bootstrap</h4>\n\n\t<p>We say that our application is based on the concept of an standalone application. And all this starts from the beginning. So obvious ... We're talking about Bootstrap. </p>\n\n\t<p>Bootstrap is the point that defines the beginning of our application, we speak of a class with a main method that is executed to start a program in java. Cool, but what's so different? And now let's get to work ...</p>\n\n\t<p>The following code snippet refers to traditional initialization class implemented with the Jspare Framework. (From here we will always try to make clear our codes, we will put the import packages and reference the contents)</p>\n\n\t <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport org.jspare.core.container.Application;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n  \t... Execute something here ...\n  }\n}\n</code>\n        </pre>\n\n     <p>The example will trigger your application if it has structured as an application stando alone and its end result is a fat-jar. But note that this is not a rule, there are other ways to start the container, let's address later. But speaking the real, it will depend a lot on your application or other technology you are using. To finish the reasoning, we are easy to integrate with your project.</p>\n\n</div>\n</section>\n\n<section id=\"sec-contribute\">\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Contribute</h2>\n\t\t\t<p>The JSpare more powerfull</p>\n\t\t</header>\n\t\t\n\t\t<br>\n\t\t<h4 id=\"sec-contribute-issues\">Issues / Bugs</h4>\n\t\t<p>You can report any issue or bug, just go to our github and register a new task, make sure our team and above all the community will help you. For our growth it is fundamental that we are always united with the whole community.</p>\n\n\t\t<p>Please register your issue at: <a href=\"https://github.com/jspare-projects/jspare-container/issues\">GitHub / Issues</a> \n\t\t\t\n\t\t\t<h4 id=\"sec-contribute-changelog\">Changelog</h4>\n\n\t\t\t<p>Access the <a href=\"/docs\">Changelog Page</a> and track all of our backlog and predictions of new features and fixes.</p>\n\t\t</div>\n\t</section>\n\n\t<section id=\"sec-others\">\n\t\t<div class=\"container\">\n\t\t\t<header class=\"section-header\">\n\t\t\t\t<h2>Others</h2>\n\t\t\t\t<p>Behind of framework</p>\n\t\t\t</header>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-architecture\">Architecture</h4>\n\n\t\t\t<p>We are writing an article with all the detail behind development. Sign up and do not miss updates.</p>\n\t\t\t\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-dep\">Dependencies Resolutions</h4>\n\n\t\t\t<p>Our entire project was thought to be the purest and simplest solution in terms of container and control inversion.</p>\n\n\t\t\t<p>We have a short list of dependencies that are part of our development, know a bit more because we use some of these technologies.</p>\n\n\t\t\t<br>\n\t\t\t<h4 id=\"sec-others-ref\">Other references</h4>\n\n\t\t\t<p>In this section we will bring some other references of projects that use or are based on the jspare framework.</p>\n\n\t\t</div>\n\t</section>"},{"id":"changelog","title":"Changelog","nav_title":"Changelog","nav_message":"Roadmap","date":"2016-07-21T16:40:50.000Z","_content":"\n<section class=\"border-bottom section-sm\">\n\t<div class=\"container\">\n\t\t<ul class=\"changelog-guide\">\n\t\t\t<li class=\"change-add\">Added</li>\n\t\t\t<li class=\"change-update\">Updated</li>\n\t\t\t<li class=\"change-fix\">Fixed</li>\n\t\t\t<li class=\"change-todo\">Todo</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section class=\"bg-gray-lighter no-border-bottom\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>TODO, 2017</span>\n\t\t\t<h2>Version 2.X.X/</h2>\n\t\t\t<p>TODO Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-todo\">Workshop area on website.</li>\t\t\t\n\t\t\t<li class=\"change-todo\">Improve unit tests to 99% of coverage.</li>\n\t\t\t<li class=\"change-todo\">Improve javadoc documentation.</li>\n\t\t\t<li class=\"change-todo\">Versioned documentation.</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>January, 2017</span>\n\t\t\t<h2>Version 2.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release artifcats to m2 release.</li>\n\t\t\t<li class=\"change-add\">Added native Application Context Resource</li>\n\t\t\t<li class=\"change-add\">Added Injector Strategy to customize inversion of control</li>\n\t\t\t<li class=\"change-add\">Added Resource injection with @Resource for non components</li>\n\t\t\t<li class=\"change-update\">Improved Environment Exception and standardized error codes</li>\n\t\t\t<li class=\"change-update\">Improved CommonsConfiguration with Apache Configurations</li>\n\t\t\t<li class=\"change-update\">Improved unit tests to more than 85% of coverage.</li>\n\t\t\t<li class=\"change-update\">Improved performance of Environment Container</li>\n\t\t\t<li class=\"change-update\">Restructured Environment Container</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>November, 2016</span>\n\t\t\t<h2>Version 1.1.0</h2>\n\t\t\t<p>Release Candidate</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-update\">Discontinued release 1.1.0, and moved to Branch 1.1.0 and prepared to release 2.0.0</li>\n\t\t\t<li class=\"change-todo\">Release of 1.1.0</li>\n\t\t\t<li class=\"change-add\">Added Parameterized retention to superclass types</li>\n\t\t\t<li class=\"change-update\">Improved code coverage</li>\n\t\t\t<li class=\"change-fix\">Removed Serializer default interfaces from core project</li>\n\t\t\t<li class=\"change-fix\">Moved Collections features to jspare-collections project</li>\n\t\t</ul>\n\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<span>June, 2016</span>\n\t\t\t<h2>Version 1.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release of 1.0.0</li>\n\t\t\t<li class=\"change-add\">50% Test Coverage</li>\n\t\t\t<li class=\"change-add\">Custom Derivates Collections</li>\n\t\t\t<li class=\"change-add\">MySupport extension for simple injection at any class</li>\n\t\t\t<li class=\"change-add\">Injection with @Inject Annotation</li>\n\t\t\t<li class=\"change-add\">Resource File Loader</li>\n\t\t\t<li class=\"change-add\">Json Components using Gson</li>\n\t\t\t<li class=\"change-add\">Apache Commons Configuration to Parameterized Apps</li>\n\t\t\t<li class=\"change-add\">Bundle Packages into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Builder into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Container</li>\n\t\t\t<li class=\"change-add\">Powered by Lombok Project</li>\n\t\t\t<li class=\"change-add\">Application Bootsrap Support</li>\\\n\t\t</ul>\n\t\t\n\t</div>\n</section>","source":"changelog/index.swig","raw":"---\nid: changelog\ntitle: Changelog\nnav_title: Changelog\nnav_message: Roadmap\ndate: 2016-07-21 13:40:50\n---\n\n<section class=\"border-bottom section-sm\">\n\t<div class=\"container\">\n\t\t<ul class=\"changelog-guide\">\n\t\t\t<li class=\"change-add\">Added</li>\n\t\t\t<li class=\"change-update\">Updated</li>\n\t\t\t<li class=\"change-fix\">Fixed</li>\n\t\t\t<li class=\"change-todo\">Todo</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section class=\"bg-gray-lighter no-border-bottom\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>TODO, 2017</span>\n\t\t\t<h2>Version 2.X.X/</h2>\n\t\t\t<p>TODO Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-todo\">Workshop area on website.</li>\t\t\t\n\t\t\t<li class=\"change-todo\">Improve unit tests to 99% of coverage.</li>\n\t\t\t<li class=\"change-todo\">Improve javadoc documentation.</li>\n\t\t\t<li class=\"change-todo\">Versioned documentation.</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>January, 2017</span>\n\t\t\t<h2>Version 2.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release artifcats to m2 release.</li>\n\t\t\t<li class=\"change-add\">Added native Application Context Resource</li>\n\t\t\t<li class=\"change-add\">Added Injector Strategy to customize inversion of control</li>\n\t\t\t<li class=\"change-add\">Added Resource injection with @Resource for non components</li>\n\t\t\t<li class=\"change-update\">Improved Environment Exception and standardized error codes</li>\n\t\t\t<li class=\"change-update\">Improved CommonsConfiguration with Apache Configurations</li>\n\t\t\t<li class=\"change-update\">Improved unit tests to more than 85% of coverage.</li>\n\t\t\t<li class=\"change-update\">Improved performance of Environment Container</li>\n\t\t\t<li class=\"change-update\">Restructured Environment Container</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>November, 2016</span>\n\t\t\t<h2>Version 1.1.0</h2>\n\t\t\t<p>Release Candidate</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-update\">Discontinued release 1.1.0, and moved to Branch 1.1.0 and prepared to release 2.0.0</li>\n\t\t\t<li class=\"change-todo\">Release of 1.1.0</li>\n\t\t\t<li class=\"change-add\">Added Parameterized retention to superclass types</li>\n\t\t\t<li class=\"change-update\">Improved code coverage</li>\n\t\t\t<li class=\"change-fix\">Removed Serializer default interfaces from core project</li>\n\t\t\t<li class=\"change-fix\">Moved Collections features to jspare-collections project</li>\n\t\t</ul>\n\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<span>June, 2016</span>\n\t\t\t<h2>Version 1.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release of 1.0.0</li>\n\t\t\t<li class=\"change-add\">50% Test Coverage</li>\n\t\t\t<li class=\"change-add\">Custom Derivates Collections</li>\n\t\t\t<li class=\"change-add\">MySupport extension for simple injection at any class</li>\n\t\t\t<li class=\"change-add\">Injection with @Inject Annotation</li>\n\t\t\t<li class=\"change-add\">Resource File Loader</li>\n\t\t\t<li class=\"change-add\">Json Components using Gson</li>\n\t\t\t<li class=\"change-add\">Apache Commons Configuration to Parameterized Apps</li>\n\t\t\t<li class=\"change-add\">Bundle Packages into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Builder into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Container</li>\n\t\t\t<li class=\"change-add\">Powered by Lombok Project</li>\n\t\t\t<li class=\"change-add\">Application Bootsrap Support</li>\\\n\t\t</ul>\n\t\t\n\t</div>\n</section>","updated":"2017-01-11T00:00:38.000Z","path":"changelog/index.html","comments":1,"layout":"page","_id":"cixscqmz40004v09kjlvziskt","content":"\n<section class=\"border-bottom section-sm\">\n\t<div class=\"container\">\n\t\t<ul class=\"changelog-guide\">\n\t\t\t<li class=\"change-add\">Added</li>\n\t\t\t<li class=\"change-update\">Updated</li>\n\t\t\t<li class=\"change-fix\">Fixed</li>\n\t\t\t<li class=\"change-todo\">Todo</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section class=\"bg-gray-lighter no-border-bottom\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>TODO, 2017</span>\n\t\t\t<h2>Version 2.X.X/</h2>\n\t\t\t<p>TODO Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-todo\">Workshop area on website.</li>\t\t\t\n\t\t\t<li class=\"change-todo\">Improve unit tests to 99% of coverage.</li>\n\t\t\t<li class=\"change-todo\">Improve javadoc documentation.</li>\n\t\t\t<li class=\"change-todo\">Versioned documentation.</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>January, 2017</span>\n\t\t\t<h2>Version 2.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release artifcats to m2 release.</li>\n\t\t\t<li class=\"change-add\">Added native Application Context Resource</li>\n\t\t\t<li class=\"change-add\">Added Injector Strategy to customize inversion of control</li>\n\t\t\t<li class=\"change-add\">Added Resource injection with @Resource for non components</li>\n\t\t\t<li class=\"change-update\">Improved Environment Exception and standardized error codes</li>\n\t\t\t<li class=\"change-update\">Improved CommonsConfiguration with Apache Configurations</li>\n\t\t\t<li class=\"change-update\">Improved unit tests to more than 85% of coverage.</li>\n\t\t\t<li class=\"change-update\">Improved performance of Environment Container</li>\n\t\t\t<li class=\"change-update\">Restructured Environment Container</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>November, 2016</span>\n\t\t\t<h2>Version 1.1.0</h2>\n\t\t\t<p>Release Candidate</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-update\">Discontinued release 1.1.0, and moved to Branch 1.1.0 and prepared to release 2.0.0</li>\n\t\t\t<li class=\"change-todo\">Release of 1.1.0</li>\n\t\t\t<li class=\"change-add\">Added Parameterized retention to superclass types</li>\n\t\t\t<li class=\"change-update\">Improved code coverage</li>\n\t\t\t<li class=\"change-fix\">Removed Serializer default interfaces from core project</li>\n\t\t\t<li class=\"change-fix\">Moved Collections features to jspare-collections project</li>\n\t\t</ul>\n\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<span>June, 2016</span>\n\t\t\t<h2>Version 1.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release of 1.0.0</li>\n\t\t\t<li class=\"change-add\">50% Test Coverage</li>\n\t\t\t<li class=\"change-add\">Custom Derivates Collections</li>\n\t\t\t<li class=\"change-add\">MySupport extension for simple injection at any class</li>\n\t\t\t<li class=\"change-add\">Injection with @Inject Annotation</li>\n\t\t\t<li class=\"change-add\">Resource File Loader</li>\n\t\t\t<li class=\"change-add\">Json Components using Gson</li>\n\t\t\t<li class=\"change-add\">Apache Commons Configuration to Parameterized Apps</li>\n\t\t\t<li class=\"change-add\">Bundle Packages into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Builder into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Container</li>\n\t\t\t<li class=\"change-add\">Powered by Lombok Project</li>\n\t\t\t<li class=\"change-add\">Application Bootsrap Support</li>\\\n\t\t</ul>\n\t\t\n\t</div>\n</section>","excerpt":"","more":"\n<section class=\"border-bottom section-sm\">\n\t<div class=\"container\">\n\t\t<ul class=\"changelog-guide\">\n\t\t\t<li class=\"change-add\">Added</li>\n\t\t\t<li class=\"change-update\">Updated</li>\n\t\t\t<li class=\"change-fix\">Fixed</li>\n\t\t\t<li class=\"change-todo\">Todo</li>\n\t\t</ul>\n\t</div>\n</section>\n\n<section class=\"bg-gray-lighter no-border-bottom\">\n\t<div class=\"container\">\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>TODO, 2017</span>\n\t\t\t<h2>Version 2.X.X/</h2>\n\t\t\t<p>TODO Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-todo\">Workshop area on website.</li>\t\t\t\n\t\t\t<li class=\"change-todo\">Improve unit tests to 99% of coverage.</li>\n\t\t\t<li class=\"change-todo\">Improve javadoc documentation.</li>\n\t\t\t<li class=\"change-todo\">Versioned documentation.</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>January, 2017</span>\n\t\t\t<h2>Version 2.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release artifcats to m2 release.</li>\n\t\t\t<li class=\"change-add\">Added native Application Context Resource</li>\n\t\t\t<li class=\"change-add\">Added Injector Strategy to customize inversion of control</li>\n\t\t\t<li class=\"change-add\">Added Resource injection with @Resource for non components</li>\n\t\t\t<li class=\"change-update\">Improved Environment Exception and standardized error codes</li>\n\t\t\t<li class=\"change-update\">Improved CommonsConfiguration with Apache Configurations</li>\n\t\t\t<li class=\"change-update\">Improved unit tests to more than 85% of coverage.</li>\n\t\t\t<li class=\"change-update\">Improved performance of Environment Container</li>\n\t\t\t<li class=\"change-update\">Restructured Environment Container</li>\n\t\t</ul>\n\n\t\t<header class=\"section-header\">\n\t\t\t<span>November, 2016</span>\n\t\t\t<h2>Version 1.1.0</h2>\n\t\t\t<p>Release Candidate</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-update\">Discontinued release 1.1.0, and moved to Branch 1.1.0 and prepared to release 2.0.0</li>\n\t\t\t<li class=\"change-todo\">Release of 1.1.0</li>\n\t\t\t<li class=\"change-add\">Added Parameterized retention to superclass types</li>\n\t\t\t<li class=\"change-update\">Improved code coverage</li>\n\t\t\t<li class=\"change-fix\">Removed Serializer default interfaces from core project</li>\n\t\t\t<li class=\"change-fix\">Moved Collections features to jspare-collections project</li>\n\t\t</ul>\n\n\t\t\n\t\t<header class=\"section-header\">\n\t\t\t<span>June, 2016</span>\n\t\t\t<h2>Version 1.0.0</h2>\n\t\t\t<p>Release</p>\n\t\t</header>\n\t\t<ul class=\"changelog\">\n\t\t\t<li class=\"change-add\">Release of 1.0.0</li>\n\t\t\t<li class=\"change-add\">50% Test Coverage</li>\n\t\t\t<li class=\"change-add\">Custom Derivates Collections</li>\n\t\t\t<li class=\"change-add\">MySupport extension for simple injection at any class</li>\n\t\t\t<li class=\"change-add\">Injection with @Inject Annotation</li>\n\t\t\t<li class=\"change-add\">Resource File Loader</li>\n\t\t\t<li class=\"change-add\">Json Components using Gson</li>\n\t\t\t<li class=\"change-add\">Apache Commons Configuration to Parameterized Apps</li>\n\t\t\t<li class=\"change-add\">Bundle Packages into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Builder into Bootstrap</li>\n\t\t\t<li class=\"change-add\">Environment Container</li>\n\t\t\t<li class=\"change-add\">Powered by Lombok Project</li>\n\t\t\t<li class=\"change-add\">Application Bootsrap Support</li>\\\n\t\t</ul>\n\t\t\n\t</div>\n</section>"},{"id":"get-started","title":"Get Started","nav_title":"Get Started","nav_message":"Starting with the JSpare Framework","date":"2016-07-21T16:40:50.000Z","_content":"\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>First steps</h2>\n\t\t\t<p>Starting with JSpare Core Container</p>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Core Container</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\t\n\t<h4 id=\"sec-gettingstarted-project\">Structuring a project</h4>\n\t<p>Example basics of how should be the default structure of your project, later on we will deal with all the conventions.</p>\n\t\n\t <div class=\"file-tree\">\n              <ul>\n                <li class=\"is-folder open\">\n                  <span>org.jspare.samples</span>\n                  <i>Default package</i>\n                  <ul>\n                    <li class=\"is-folder open\">\n                      <span>model</span>\n                      <i>Package with models</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>Car.java</span>\n                      \t\t<i>Sample model</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                     <li class=\"is-folder open\">\n                      <span>api</span>\n                      <i>API sample package</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>CarApi.java</span>\n                      \t\t<i>Interfaces of APIs</i>\n                    \t</li>\n                    \t<li class=\"is-file\">\n                      \t\t<span>CarApiImpl.java</span>\n                      \t\t<i>Impl for CarApi interface</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                    <li class=\"is-folder open\">\n                      <span>application</span>\n                      <i>The application impls</i>\n                      <ul>\n                        <li class=\"is-file\">\n                          <span>Consumer.java</span>\n                          <i>Class responsible for consume apis</i>\n                      </li>\n                      </ul>\n                    </li>\n                    <li class=\"is-file\">\n                      <span>Bootstrap.java</span>\n                      <i>Bootstrap of project</i>\n                    </li>\n                  </ul>\n                </li>\n\n              </ul>\n            </div>\n            \n\t\t<h4>Modularized your applications!</h4>\n\t\t<p>Write your applications using container, surely your application will get more organized and you were unpacking things.</p>\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples.api;\n\nimport java.util.List;\n\nimport org.jspare.core.annotation.Component;\nimport org.jspare.samples.model.Car;\n\n@Component\npublic interface CarApi {\n\n  List<Car> search();\n}\n</code>\n\t\t\t\t</pre>\t\n      <h4>Follow the convetions, it will help you!</h4>\n    <p>The JSpare Core Container, have some conventions for help with your codding. Below you will see a convention for standard implementation of a component.</p>\n    <pre class=\"line-numbers\"><code class=\"language-java\">\n\npackage org.jspare.samples.model;\n\npublic class Car {\n\n  private String name;\n  \n  private int year;\n  \n  public Car(String name, int year) {\n    super();\n    this.name = name;\n    this.year = year;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getYear() {\n    return year;\n  }\n\n  public void setYear(int year) {\n    this.year = year;\n  }\n  \n  public void print(){\n    \n    System.out.println(toString());\n  }\n\n  @Override\n  public String toString() {\n    return \"Car [name=\" + name + \", year=\" + year + \"]\";\n  }\n}\n\npackage org.jspare.samples.api;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspare.samples.model.Car;\n\npublic class CarApiImpl implements CarApi {\n\n  @Override\n  public List<Car> search() {\n\n    return Arrays.asList(new Car(\"BMW 3 Series\", 2017), new Car(\"Lexus RX 350\", 2016));\n  }\n}\n\npackage org.jspare.samples.application;\n\nimport org.jspare.core.annotation.Inject;\nimport org.jspare.core.annotation.Resource;\nimport org.jspare.samples.api.CarApi;\nimport org.jspare.samples.model.Car;\n\n@Resource\npublic class Consumer {\n\n  @Inject\n  private CarApi carApi;\n  \n  public void giveMeAllCars(){\n    \n    carApi.search().forEach(Car::print);\n  }\n}\n\n</code>\n        </pre>  \n\n\n <h4>Bootstraping, its time to start your java application</h4>\n      <p>Bootstrap is the starting point of your application, through it you will set the standards and behaviors. Access the references for more information.</p>\n      <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport static org.jspare.core.container.Environment.my;\n\nimport org.jspare.core.container.Application;\nimport org.jspare.samples.application.Consumer;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n    my(Consumer.class).giveMeAllCars();\n  }\n}\n</code>\n        </pre>\n\n<h4>Dont't worry!</h4>\n<p>Please refer to the documentation to better understand the conventions. <a href=\"/docs\">See more</a></p>\n<p>The above code are available <a href=\"https://github.com/jspare-projects/jspare-samples\">here</a> on Github.\n</div>\n</section>","source":"get-started/index.swig","raw":"---\nid: get-started\ntitle: Get Started\nnav_title: Get Started\nnav_message: Starting with the JSpare Framework\ndate: 2016-07-21 13:40:50\n---\n\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>First steps</h2>\n\t\t\t<p>Starting with JSpare Core Container</p>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Core Container</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\t\n\t<h4 id=\"sec-gettingstarted-project\">Structuring a project</h4>\n\t<p>Example basics of how should be the default structure of your project, later on we will deal with all the conventions.</p>\n\t\n\t <div class=\"file-tree\">\n              <ul>\n                <li class=\"is-folder open\">\n                  <span>org.jspare.samples</span>\n                  <i>Default package</i>\n                  <ul>\n                    <li class=\"is-folder open\">\n                      <span>model</span>\n                      <i>Package with models</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>Car.java</span>\n                      \t\t<i>Sample model</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                     <li class=\"is-folder open\">\n                      <span>api</span>\n                      <i>API sample package</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>CarApi.java</span>\n                      \t\t<i>Interfaces of APIs</i>\n                    \t</li>\n                    \t<li class=\"is-file\">\n                      \t\t<span>CarApiImpl.java</span>\n                      \t\t<i>Impl for CarApi interface</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                    <li class=\"is-folder open\">\n                      <span>application</span>\n                      <i>The application impls</i>\n                      <ul>\n                        <li class=\"is-file\">\n                          <span>Consumer.java</span>\n                          <i>Class responsible for consume apis</i>\n                      </li>\n                      </ul>\n                    </li>\n                    <li class=\"is-file\">\n                      <span>Bootstrap.java</span>\n                      <i>Bootstrap of project</i>\n                    </li>\n                  </ul>\n                </li>\n\n              </ul>\n            </div>\n            \n\t\t<h4>Modularized your applications!</h4>\n\t\t<p>Write your applications using container, surely your application will get more organized and you were unpacking things.</p>\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples.api;\n\nimport java.util.List;\n\nimport org.jspare.core.annotation.Component;\nimport org.jspare.samples.model.Car;\n\n@Component\npublic interface CarApi {\n\n  List<Car> search();\n}\n</code>\n\t\t\t\t</pre>\t\n      <h4>Follow the convetions, it will help you!</h4>\n    <p>The JSpare Core Container, have some conventions for help with your codding. Below you will see a convention for standard implementation of a component.</p>\n    <pre class=\"line-numbers\"><code class=\"language-java\">\n\npackage org.jspare.samples.model;\n\npublic class Car {\n\n  private String name;\n  \n  private int year;\n  \n  public Car(String name, int year) {\n    super();\n    this.name = name;\n    this.year = year;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getYear() {\n    return year;\n  }\n\n  public void setYear(int year) {\n    this.year = year;\n  }\n  \n  public void print(){\n    \n    System.out.println(toString());\n  }\n\n  @Override\n  public String toString() {\n    return \"Car [name=\" + name + \", year=\" + year + \"]\";\n  }\n}\n\npackage org.jspare.samples.api;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspare.samples.model.Car;\n\npublic class CarApiImpl implements CarApi {\n\n  @Override\n  public List<Car> search() {\n\n    return Arrays.asList(new Car(\"BMW 3 Series\", 2017), new Car(\"Lexus RX 350\", 2016));\n  }\n}\n\npackage org.jspare.samples.application;\n\nimport org.jspare.core.annotation.Inject;\nimport org.jspare.core.annotation.Resource;\nimport org.jspare.samples.api.CarApi;\nimport org.jspare.samples.model.Car;\n\n@Resource\npublic class Consumer {\n\n  @Inject\n  private CarApi carApi;\n  \n  public void giveMeAllCars(){\n    \n    carApi.search().forEach(Car::print);\n  }\n}\n\n</code>\n        </pre>  \n\n\n <h4>Bootstraping, its time to start your java application</h4>\n      <p>Bootstrap is the starting point of your application, through it you will set the standards and behaviors. Access the references for more information.</p>\n      <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport static org.jspare.core.container.Environment.my;\n\nimport org.jspare.core.container.Application;\nimport org.jspare.samples.application.Consumer;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n    my(Consumer.class).giveMeAllCars();\n  }\n}\n</code>\n        </pre>\n\n<h4>Dont't worry!</h4>\n<p>Please refer to the documentation to better understand the conventions. <a href=\"/docs\">See more</a></p>\n<p>The above code are available <a href=\"https://github.com/jspare-projects/jspare-samples\">here</a> on Github.\n</div>\n</section>","updated":"2017-01-11T00:03:42.000Z","path":"get-started/index.html","comments":1,"layout":"page","_id":"cixscqmz60005v09koxdcctc5","content":"\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>First steps</h2>\n\t\t\t<p>Starting with JSpare Core Container</p>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Core Container</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\t\n\t<h4 id=\"sec-gettingstarted-project\">Structuring a project</h4>\n\t<p>Example basics of how should be the default structure of your project, later on we will deal with all the conventions.</p>\n\t\n\t <div class=\"file-tree\">\n              <ul>\n                <li class=\"is-folder open\">\n                  <span>org.jspare.samples</span>\n                  <i>Default package</i>\n                  <ul>\n                    <li class=\"is-folder open\">\n                      <span>model</span>\n                      <i>Package with models</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>Car.java</span>\n                      \t\t<i>Sample model</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                     <li class=\"is-folder open\">\n                      <span>api</span>\n                      <i>API sample package</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>CarApi.java</span>\n                      \t\t<i>Interfaces of APIs</i>\n                    \t</li>\n                    \t<li class=\"is-file\">\n                      \t\t<span>CarApiImpl.java</span>\n                      \t\t<i>Impl for CarApi interface</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                    <li class=\"is-folder open\">\n                      <span>application</span>\n                      <i>The application impls</i>\n                      <ul>\n                        <li class=\"is-file\">\n                          <span>Consumer.java</span>\n                          <i>Class responsible for consume apis</i>\n                      </li>\n                      </ul>\n                    </li>\n                    <li class=\"is-file\">\n                      <span>Bootstrap.java</span>\n                      <i>Bootstrap of project</i>\n                    </li>\n                  </ul>\n                </li>\n\n              </ul>\n            </div>\n            \n\t\t<h4>Modularized your applications!</h4>\n\t\t<p>Write your applications using container, surely your application will get more organized and you were unpacking things.</p>\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples.api;\n\nimport java.util.List;\n\nimport org.jspare.core.annotation.Component;\nimport org.jspare.samples.model.Car;\n\n@Component\npublic interface CarApi {\n\n  List<car> search();\n}\n</car></code>\n\t\t\t\t</pre>\t\n      <h4>Follow the convetions, it will help you!</h4>\n    <p>The JSpare Core Container, have some conventions for help with your codding. Below you will see a convention for standard implementation of a component.</p>\n    <pre class=\"line-numbers\"><code class=\"language-java\">\n\npackage org.jspare.samples.model;\n\npublic class Car {\n\n  private String name;\n  \n  private int year;\n  \n  public Car(String name, int year) {\n    super();\n    this.name = name;\n    this.year = year;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getYear() {\n    return year;\n  }\n\n  public void setYear(int year) {\n    this.year = year;\n  }\n  \n  public void print(){\n    \n    System.out.println(toString());\n  }\n\n  @Override\n  public String toString() {\n    return \"Car [name=\" + name + \", year=\" + year + \"]\";\n  }\n}\n\npackage org.jspare.samples.api;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspare.samples.model.Car;\n\npublic class CarApiImpl implements CarApi {\n\n  @Override\n  public List<car> search() {\n\n    return Arrays.asList(new Car(\"BMW 3 Series\", 2017), new Car(\"Lexus RX 350\", 2016));\n  }\n}\n\npackage org.jspare.samples.application;\n\nimport org.jspare.core.annotation.Inject;\nimport org.jspare.core.annotation.Resource;\nimport org.jspare.samples.api.CarApi;\nimport org.jspare.samples.model.Car;\n\n@Resource\npublic class Consumer {\n\n  @Inject\n  private CarApi carApi;\n  \n  public void giveMeAllCars(){\n    \n    carApi.search().forEach(Car::print);\n  }\n}\n\n</car></code>\n        </pre>  \n\n\n <h4>Bootstraping, its time to start your java application</h4>\n      <p>Bootstrap is the starting point of your application, through it you will set the standards and behaviors. Access the references for more information.</p>\n      <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport static org.jspare.core.container.Environment.my;\n\nimport org.jspare.core.container.Application;\nimport org.jspare.samples.application.Consumer;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n    my(Consumer.class).giveMeAllCars();\n  }\n}\n</code>\n        </pre>\n\n<h4>Dont't worry!</h4>\n<p>Please refer to the documentation to better understand the conventions. <a href=\"/docs\">See more</a></p>\n<p>The above code are available <a href=\"https://github.com/jspare-projects/jspare-samples\" target=\"_blank\" rel=\"external\">here</a> on Github.\n</p></div>\n</section>","excerpt":"","more":"\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>First steps</h2>\n\t\t\t<p>Starting with JSpare Core Container</p>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Core Container</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\n  <p>For Android support use <code>jspare-core-android-support</code> as artifactId.</p>\n\t\n\t<h4 id=\"sec-gettingstarted-project\">Structuring a project</h4>\n\t<p>Example basics of how should be the default structure of your project, later on we will deal with all the conventions.</p>\n\t\n\t <div class=\"file-tree\">\n              <ul>\n                <li class=\"is-folder open\">\n                  <span>org.jspare.samples</span>\n                  <i>Default package</i>\n                  <ul>\n                    <li class=\"is-folder open\">\n                      <span>model</span>\n                      <i>Package with models</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>Car.java</span>\n                      \t\t<i>Sample model</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                     <li class=\"is-folder open\">\n                      <span>api</span>\n                      <i>API sample package</i>\n                      <ul>\n                      \t<li class=\"is-file\">\n                      \t\t<span>CarApi.java</span>\n                      \t\t<i>Interfaces of APIs</i>\n                    \t</li>\n                    \t<li class=\"is-file\">\n                      \t\t<span>CarApiImpl.java</span>\n                      \t\t<i>Impl for CarApi interface</i>\n                    \t</li>\n                      </ul>\n                    </li>\n                    <li class=\"is-folder open\">\n                      <span>application</span>\n                      <i>The application impls</i>\n                      <ul>\n                        <li class=\"is-file\">\n                          <span>Consumer.java</span>\n                          <i>Class responsible for consume apis</i>\n                      </li>\n                      </ul>\n                    </li>\n                    <li class=\"is-file\">\n                      <span>Bootstrap.java</span>\n                      <i>Bootstrap of project</i>\n                    </li>\n                  </ul>\n                </li>\n\n              </ul>\n            </div>\n            \n\t\t<h4>Modularized your applications!</h4>\n\t\t<p>Write your applications using container, surely your application will get more organized and you were unpacking things.</p>\n\t\t<pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples.api;\n\nimport java.util.List;\n\nimport org.jspare.core.annotation.Component;\nimport org.jspare.samples.model.Car;\n\n@Component\npublic interface CarApi {\n\n  List<Car> search();\n}\n</code>\n\t\t\t\t</pre>\t\n      <h4>Follow the convetions, it will help you!</h4>\n    <p>The JSpare Core Container, have some conventions for help with your codding. Below you will see a convention for standard implementation of a component.</p>\n    <pre class=\"line-numbers\"><code class=\"language-java\">\n\npackage org.jspare.samples.model;\n\npublic class Car {\n\n  private String name;\n  \n  private int year;\n  \n  public Car(String name, int year) {\n    super();\n    this.name = name;\n    this.year = year;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getYear() {\n    return year;\n  }\n\n  public void setYear(int year) {\n    this.year = year;\n  }\n  \n  public void print(){\n    \n    System.out.println(toString());\n  }\n\n  @Override\n  public String toString() {\n    return \"Car [name=\" + name + \", year=\" + year + \"]\";\n  }\n}\n\npackage org.jspare.samples.api;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.jspare.samples.model.Car;\n\npublic class CarApiImpl implements CarApi {\n\n  @Override\n  public List<Car> search() {\n\n    return Arrays.asList(new Car(\"BMW 3 Series\", 2017), new Car(\"Lexus RX 350\", 2016));\n  }\n}\n\npackage org.jspare.samples.application;\n\nimport org.jspare.core.annotation.Inject;\nimport org.jspare.core.annotation.Resource;\nimport org.jspare.samples.api.CarApi;\nimport org.jspare.samples.model.Car;\n\n@Resource\npublic class Consumer {\n\n  @Inject\n  private CarApi carApi;\n  \n  public void giveMeAllCars(){\n    \n    carApi.search().forEach(Car::print);\n  }\n}\n\n</code>\n        </pre>  \n\n\n <h4>Bootstraping, its time to start your java application</h4>\n      <p>Bootstrap is the starting point of your application, through it you will set the standards and behaviors. Access the references for more information.</p>\n      <pre class=\"line-numbers\"><code class=\"language-java\">\npackage org.jspare.samples;\n\nimport static org.jspare.core.container.Environment.my;\n\nimport org.jspare.core.container.Application;\nimport org.jspare.samples.application.Consumer;\n\npublic class Boostrap extends Application {\n\n  public static void main(String[] args) {\n\n    Application.run(Boostrap.class);\n  }\n  \n  @Override\n  protected void start() {\n\n    my(Consumer.class).giveMeAllCars();\n  }\n}\n</code>\n        </pre>\n\n<h4>Dont't worry!</h4>\n<p>Please refer to the documentation to better understand the conventions. <a href=\"/docs\">See more</a></p>\n<p>The above code are available <a href=\"https://github.com/jspare-projects/jspare-samples\">here</a> on Github.\n</div>\n</section>"},{"id":"downloads","title":"Downlaods","nav_title":"Downloads","nav_message":"Getting JSpare Framework","date":"2016-07-21T16:40:50.000Z","_content":"\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Downloads</h2>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\t\n\t\n\t</div>\n\n\n</section>","source":"downloads/index.swig","raw":"---\nid: downloads\ntitle: Downlaods\nnav_title: Downloads\nnav_message: Getting JSpare Framework\ndate: 2016-07-21 13:40:50\n---\n\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Downloads</h2>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\t\n\t\n\t</div>\n\n\n</section>","updated":"2017-01-11T02:39:37.000Z","path":"downloads/index.html","comments":1,"layout":"page","_id":"cixscqmza0006v09k3g4mq4km","content":"\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Downloads</h2>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\t\n\t\n\t</div>\n\n\n</section>","excerpt":"","more":"\n\n<section>\n\t<div class=\"container\">\n\t\t<header class=\"section-header\">\n\t\t\t<h2>Downloads</h2>\n\t\t</header>\n\t\t\n\t\t<h4 id=\"sec-gettingstarted-dep\">Dependencies</h4>\n\t\t<p>Follow the required dependencies for start with JSpare Framework</p>\n\t\t<h5>Maven</h5>\n\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.jspare&lt;/groupId&gt;\n\t&lt;artifactId&gt;jspare-core&lt;/artifactId&gt;\n\t&lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n\n\t<h5>Gradle</h5>\n\t\t\t\t\t<pre class=\"line-numbers\"><code class=\"language-markup\">\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile \"org.jspare:jspare-core:2.0.0\"\n}\n\t</code></pre>\n\t\n\t\n\t</div>\n\n\n</section>"},{"id":"terms","title":"License","nav_title":"License","nav_message":null,"date":"2016-07-21T16:40:50.000Z","_content":"\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-terms\">Terms</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n<section id=\"sec-projects\">\n\t<div class=\"container\">\n\t\t<div class=\"row\">\n\t\t\t<h4>Terms of Use</h4>\n\t\t\t<p>Please read these Terms carefully before using this website. By using this website you have accepted these\n\t\t\t\tTerms of Use. If you do not accept these Terms of Use, do not use the website. JSpare.org, Inc. (\"JSpare.org\") may\n\t\t\t\tmodify all or any part of these Terms of Use from time to time without notice to you; you should check back often so\n\t\t\t\tyou are aware of your current rights and responsibilities. Your continued use of this website after changes to the\n\t\t\t\tTerms of Use have been published constitutes your binding acceptance of the updated Terms of Use. If at any time the\n\t\t\t\tTerms of Use are no longer acceptable to you, you should immediately cease all use of this website.</p>\n\t\t\t<h4>Copyrights</h4>\n\t\t\t<p>JSpare.org either owns the intellectual property rights in the HTML, text, images audio, video, software or\n\t\t\t\tother content that is made available on this website, or has obtained the permission of the owner of the\n\t\t\t\tintellectual property to make it available on this website. JSpare.org strictly prohibits the redistribution or\n\t\t\t\tcopying of any part of this website or content on this website without written permission from JSpare.org. JSpare.org\n\t\t\t\tauthorizes you to display on your computer, download and print pages from this website provided: (a) the copyright\n\t\t\t\tnotice appears on all such printouts, (b) the information will not be altered, (c) the content is only used for\n\t\t\t\tpersonal, educational and non-commercial use, and (d) you do not redistribute or copy the information to any other\n\t\t\t\tmedia. JSpare.org respects the intellectual property of others. If you believe that your work has been copied in a way\n\t\t\t\tthat constitutes copyright infringement, please follow our Notice and Procedure for Making Claims of Copyright\n\t\t\t\tInfringement.</p>\n\t\t\t<h4>Software Use</h4>\n\t\t\t<p>Any software (\"Software\") that is made available to you to download from this website is the copyrighted work\n\t\t\t\tof JSpare.org and/or third parties. Your use of the Software is governed by the terms of the end user license\n\t\t\t\tagreement which accompanies or is included with the Software (\"License Agreement\"). You will not install any\n\t\t\t\tSoftware that is accompanied by or includes a License Agreement, unless you first agree to the terms of the License\n\t\t\t\tAgreement. SOFTWARE IS WARRANTED, IF AT ALL, IN ACCORDANCE WITH THE TERMS OF THE LICENSE AGREEMENT. EXCEPT AS SET\n\t\t\t\tFORTH IN THE LICENSE AGREEMENT, ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY\n\t\t\t\tIMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT\n\t\t\t\tTO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD TO BE LEGALLY INVALID.</p>\n\t\t</div>\n\t</div>\n</section>","source":"license/index.swig","raw":"---\nid: terms\ntitle: License\nnav_title: License\nnav_message: \ndate: 2016-07-21 13:40:50\n---\n\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-terms\">Terms</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n<section id=\"sec-projects\">\n\t<div class=\"container\">\n\t\t<div class=\"row\">\n\t\t\t<h4>Terms of Use</h4>\n\t\t\t<p>Please read these Terms carefully before using this website. By using this website you have accepted these\n\t\t\t\tTerms of Use. If you do not accept these Terms of Use, do not use the website. JSpare.org, Inc. (\"JSpare.org\") may\n\t\t\t\tmodify all or any part of these Terms of Use from time to time without notice to you; you should check back often so\n\t\t\t\tyou are aware of your current rights and responsibilities. Your continued use of this website after changes to the\n\t\t\t\tTerms of Use have been published constitutes your binding acceptance of the updated Terms of Use. If at any time the\n\t\t\t\tTerms of Use are no longer acceptable to you, you should immediately cease all use of this website.</p>\n\t\t\t<h4>Copyrights</h4>\n\t\t\t<p>JSpare.org either owns the intellectual property rights in the HTML, text, images audio, video, software or\n\t\t\t\tother content that is made available on this website, or has obtained the permission of the owner of the\n\t\t\t\tintellectual property to make it available on this website. JSpare.org strictly prohibits the redistribution or\n\t\t\t\tcopying of any part of this website or content on this website without written permission from JSpare.org. JSpare.org\n\t\t\t\tauthorizes you to display on your computer, download and print pages from this website provided: (a) the copyright\n\t\t\t\tnotice appears on all such printouts, (b) the information will not be altered, (c) the content is only used for\n\t\t\t\tpersonal, educational and non-commercial use, and (d) you do not redistribute or copy the information to any other\n\t\t\t\tmedia. JSpare.org respects the intellectual property of others. If you believe that your work has been copied in a way\n\t\t\t\tthat constitutes copyright infringement, please follow our Notice and Procedure for Making Claims of Copyright\n\t\t\t\tInfringement.</p>\n\t\t\t<h4>Software Use</h4>\n\t\t\t<p>Any software (\"Software\") that is made available to you to download from this website is the copyrighted work\n\t\t\t\tof JSpare.org and/or third parties. Your use of the Software is governed by the terms of the end user license\n\t\t\t\tagreement which accompanies or is included with the Software (\"License Agreement\"). You will not install any\n\t\t\t\tSoftware that is accompanied by or includes a License Agreement, unless you first agree to the terms of the License\n\t\t\t\tAgreement. SOFTWARE IS WARRANTED, IF AT ALL, IN ACCORDANCE WITH THE TERMS OF THE LICENSE AGREEMENT. EXCEPT AS SET\n\t\t\t\tFORTH IN THE LICENSE AGREEMENT, ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY\n\t\t\t\tIMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT\n\t\t\t\tTO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD TO BE LEGALLY INVALID.</p>\n\t\t</div>\n\t</div>\n</section>","updated":"2016-12-19T21:18:56.000Z","path":"license/index.html","comments":1,"layout":"page","_id":"cixscqmzb0007v09k3b611qug","content":"\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-terms\">Terms</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n<section id=\"sec-projects\">\n\t<div class=\"container\">\n\t\t<div class=\"row\">\n\t\t\t<h4>Terms of Use</h4>\n\t\t\t<p>Please read these Terms carefully before using this website. By using this website you have accepted these\n\t\t\t\tTerms of Use. If you do not accept these Terms of Use, do not use the website. JSpare.org, Inc. (\"JSpare.org\") may\n\t\t\t\tmodify all or any part of these Terms of Use from time to time without notice to you; you should check back often so\n\t\t\t\tyou are aware of your current rights and responsibilities. Your continued use of this website after changes to the\n\t\t\t\tTerms of Use have been published constitutes your binding acceptance of the updated Terms of Use. If at any time the\n\t\t\t\tTerms of Use are no longer acceptable to you, you should immediately cease all use of this website.</p>\n\t\t\t<h4>Copyrights</h4>\n\t\t\t<p>JSpare.org either owns the intellectual property rights in the HTML, text, images audio, video, software or\n\t\t\t\tother content that is made available on this website, or has obtained the permission of the owner of the\n\t\t\t\tintellectual property to make it available on this website. JSpare.org strictly prohibits the redistribution or\n\t\t\t\tcopying of any part of this website or content on this website without written permission from JSpare.org. JSpare.org\n\t\t\t\tauthorizes you to display on your computer, download and print pages from this website provided: (a) the copyright\n\t\t\t\tnotice appears on all such printouts, (b) the information will not be altered, (c) the content is only used for\n\t\t\t\tpersonal, educational and non-commercial use, and (d) you do not redistribute or copy the information to any other\n\t\t\t\tmedia. JSpare.org respects the intellectual property of others. If you believe that your work has been copied in a way\n\t\t\t\tthat constitutes copyright infringement, please follow our Notice and Procedure for Making Claims of Copyright\n\t\t\t\tInfringement.</p>\n\t\t\t<h4>Software Use</h4>\n\t\t\t<p>Any software (\"Software\") that is made available to you to download from this website is the copyrighted work\n\t\t\t\tof JSpare.org and/or third parties. Your use of the Software is governed by the terms of the end user license\n\t\t\t\tagreement which accompanies or is included with the Software (\"License Agreement\"). You will not install any\n\t\t\t\tSoftware that is accompanied by or includes a License Agreement, unless you first agree to the terms of the License\n\t\t\t\tAgreement. SOFTWARE IS WARRANTED, IF AT ALL, IN ACCORDANCE WITH THE TERMS OF THE LICENSE AGREEMENT. EXCEPT AS SET\n\t\t\t\tFORTH IN THE LICENSE AGREEMENT, ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY\n\t\t\t\tIMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT\n\t\t\t\tTO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD TO BE LEGALLY INVALID.</p>\n\t\t</div>\n\t</div>\n</section>","excerpt":"","more":"\n<!-- Navigation -->\n<nav class=\"page-navigation full-topbar\">\n\t<ul class=\"nav\">\n\t\t<li><a href=\"#sec-terms\">Terms</a></li>\n\t</ul>\n</nav>\n<!-- END Navigation -->\n<section id=\"sec-projects\">\n\t<div class=\"container\">\n\t\t<div class=\"row\">\n\t\t\t<h4>Terms of Use</h4>\n\t\t\t<p>Please read these Terms carefully before using this website. By using this website you have accepted these\n\t\t\t\tTerms of Use. If you do not accept these Terms of Use, do not use the website. JSpare.org, Inc. (\"JSpare.org\") may\n\t\t\t\tmodify all or any part of these Terms of Use from time to time without notice to you; you should check back often so\n\t\t\t\tyou are aware of your current rights and responsibilities. Your continued use of this website after changes to the\n\t\t\t\tTerms of Use have been published constitutes your binding acceptance of the updated Terms of Use. If at any time the\n\t\t\t\tTerms of Use are no longer acceptable to you, you should immediately cease all use of this website.</p>\n\t\t\t<h4>Copyrights</h4>\n\t\t\t<p>JSpare.org either owns the intellectual property rights in the HTML, text, images audio, video, software or\n\t\t\t\tother content that is made available on this website, or has obtained the permission of the owner of the\n\t\t\t\tintellectual property to make it available on this website. JSpare.org strictly prohibits the redistribution or\n\t\t\t\tcopying of any part of this website or content on this website without written permission from JSpare.org. JSpare.org\n\t\t\t\tauthorizes you to display on your computer, download and print pages from this website provided: (a) the copyright\n\t\t\t\tnotice appears on all such printouts, (b) the information will not be altered, (c) the content is only used for\n\t\t\t\tpersonal, educational and non-commercial use, and (d) you do not redistribute or copy the information to any other\n\t\t\t\tmedia. JSpare.org respects the intellectual property of others. If you believe that your work has been copied in a way\n\t\t\t\tthat constitutes copyright infringement, please follow our Notice and Procedure for Making Claims of Copyright\n\t\t\t\tInfringement.</p>\n\t\t\t<h4>Software Use</h4>\n\t\t\t<p>Any software (\"Software\") that is made available to you to download from this website is the copyrighted work\n\t\t\t\tof JSpare.org and/or third parties. Your use of the Software is governed by the terms of the end user license\n\t\t\t\tagreement which accompanies or is included with the Software (\"License Agreement\"). You will not install any\n\t\t\t\tSoftware that is accompanied by or includes a License Agreement, unless you first agree to the terms of the License\n\t\t\t\tAgreement. SOFTWARE IS WARRANTED, IF AT ALL, IN ACCORDANCE WITH THE TERMS OF THE LICENSE AGREEMENT. EXCEPT AS SET\n\t\t\t\tFORTH IN THE LICENSE AGREEMENT, ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY\n\t\t\t\tIMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT\n\t\t\t\tTO THE EXTENT THAT SUCH DISCLAIMERS ARE HELD TO BE LEGALLY INVALID.</p>\n\t\t</div>\n\t</div>\n</section>"}],"Post":[{"title":"Hello World","date":"2016-08-01T19:46:38.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nOk, deu certo. teste.\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2016-08-01 16:46:38\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nOk, deu certo. teste.\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)","slug":"hello-world","published":1,"updated":"2016-12-19T21:18:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixscqmyr0002v09k722ioigt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>Ok, deu certo. teste.</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>Ok, deu certo. teste.</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}